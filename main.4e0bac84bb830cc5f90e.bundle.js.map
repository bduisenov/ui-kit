{"version":3,"file":"main.4e0bac84bb830cc5f90e.bundle.js","sources":["webpack:///./.storybook/config.js","webpack:///./.storybook/theme.js","webpack:///./src/AutoSizer.tsx","webpack:///./src/Badge.tsx","webpack:///./src/BlockQuote.tsx","webpack:///./src/Box.tsx","webpack:///./src/Break.tsx","webpack:///./src/Button.tsx","webpack:///./src/Checkbox.tsx","webpack:///./src/Code/Editor.tsx","webpack:///./src/Code/Viewer.tsx","webpack:///./src/Code/styles.ts","webpack:///./src/Code/utils/astToReact.ts","webpack:///./src/Code/utils/highlightCode.ts","webpack:///./src/Code/utils/lineNumberify.ts","webpack:///./src/Code/utils/parseCode.ts","webpack:///./src/ContextMenu.tsx","webpack:///./src/Dialog.tsx","webpack:///./src/Flex.tsx","webpack:///./src/Heading.tsx","webpack:///./src/Icon.tsx","webpack:///./src/Image.tsx","webpack:///./src/Input.tsx","webpack:///./src/Link.tsx","webpack:///./src/List.tsx","webpack:///./src/Menu.tsx","webpack:///./src/Overlay.tsx","webpack:///./src/Popup/Popup.tsx","webpack:///./src/Popup/PopupContent.tsx","webpack:///./src/Popup/index.tsx","webpack:///./src/Popup/utils.ts","webpack:///./src/Portal.tsx","webpack:///./src/ScrollBox.tsx","webpack:///./src/ScrollList.tsx","webpack:///./src/Select.tsx","webpack:///./src/Table.tsx","webpack:///./src/Tabs/Tab.tsx","webpack:///./src/Tabs/TabList.tsx","webpack:///./src/Tabs/TabPanel.tsx","webpack:///./src/Tabs/index.tsx","webpack:///./src/Text.tsx","webpack:///./src/Textarea.tsx","webpack:///./src/Toast/ToastContainer.tsx","webpack:///./src/Toast/ToastContent.tsx","webpack:///./src/Toast/index.tsx","webpack:///./src/Toggle.tsx","webpack:///./src/Tooltip.tsx","webpack:///./src/__stories__/Code/Editor.tsx","webpack:///./src/__stories__/Code/Viewer.tsx","webpack:///./src/__stories__/Code/index.ts","webpack:///./src/__stories__/Data/List.tsx","webpack:///./src/__stories__/Data/ScrollList.tsx","webpack:///./src/__stories__/Data/Table.tsx","webpack:///./src/__stories__/Data/index.ts","webpack:///./src/__stories__/Forms/Button.tsx","webpack:///./src/__stories__/Forms/Checkbox.tsx","webpack:///./src/__stories__/Forms/Input.tsx","webpack:///./src/__stories__/Forms/Select.tsx","webpack:///./src/__stories__/Forms/Textarea.tsx","webpack:///./src/__stories__/Forms/Toggle.tsx","webpack:///./src/__stories__/Forms/index.ts","webpack:///./src/__stories__/Layout/Box.tsx","webpack:///./src/__stories__/Layout/Break.tsx","webpack:///./src/__stories__/Layout/Flex.tsx","webpack:///./src/__stories__/Layout/index.ts","webpack:///./src/__stories__/Menus/ContextMenu.tsx","webpack:///./src/__stories__/Menus/Menu.tsx","webpack:///./src/__stories__/Menus/index.ts","webpack:///./src/__stories__/Misc/Dialog.tsx","webpack:///./src/__stories__/Misc/Image.tsx","webpack:///./src/__stories__/Misc/Popup.tsx","webpack:///./src/__stories__/Misc/Tabs.tsx","webpack:///./src/__stories__/Misc/Toast.tsx","webpack:///./src/__stories__/Misc/Tooltip.tsx","webpack:///./src/__stories__/Misc/index.ts","webpack:///./src/__stories__/Typography/BlockQuote.tsx","webpack:///./src/__stories__/Typography/Heading.tsx","webpack:///./src/__stories__/Typography/Link.tsx","webpack:///./src/__stories__/Typography/Text.tsx","webpack:///./src/__stories__/Typography/index.ts","webpack:///./src/__stories__/Utilities/Badge.tsx","webpack:///./src/__stories__/Utilities/Icon.tsx","webpack:///./src/__stories__/Utilities/ScrollBox.tsx","webpack:///./src/__stories__/Utilities/index.ts","webpack:///./src/__stories__/Views/Components.tsx","webpack:///./src/__stories__/Views/Layout.tsx","webpack:///./src/__stories__/_utils.ts","webpack:///./src/__stories__/index.ts","webpack:///./src/hooks/useAutoFocus.ts","webpack:///./src/hooks/useHover.ts","webpack:///./src/hooks/useScrollToHash.ts","webpack:///./src/hooks/useWindowResize.ts","webpack:///./src/index.ts","webpack:///./src/styles.ts","webpack:///./src/theme/configuration.ts","webpack:///./src/theme/dark.ts","webpack:///./src/theme/index.tsx","webpack:///./src/theme/light.ts","webpack:///./src/theme/utils.ts","webpack:///./src/types.ts","webpack:///./src/utils/getVariant.ts","webpack:///./src/utils/scroll.ts","webpack:///./src/utils/validPropsPicker.ts"],"sourcesContent":["import '@stoplight/storybook-config/config';\n","import { createThemedModule } from '../src/theme';\n\nconst { useTheme, ThemeProvider } = createThemedModule();\n\nexport { useTheme, ThemeProvider };\n\nexport const themes = ['dark', 'light'];\n\nexport const zones = {\n  app: ({ base }) => ({\n    canvas:\n      base === 'light'\n        ? {\n            fg: '#111',\n            bg: '#fff',\n          }\n        : {\n            fg: '#fff',\n            bg: '#111',\n          },\n  }),\n  inverted: ({ base }) => ({\n    container:\n      base === 'dark'\n        ? {\n            fg: '#111',\n            bg: '#fff',\n          }\n        : {\n            fg: '#fff',\n            bg: '#111',\n          },\n  }),\n  inner: {\n    container: {\n      fg: 'white',\n      bg: 'purple',\n    },\n  },\n};\n","import { Omit } from '@stoplight/types';\nimport * as React from 'react';\nimport useResizeObserver from 'use-resize-observer';\nimport { Box, IBox } from './Box';\n\nexport interface IAutoSizer extends Omit<IBox, 'children'> {\n  children: ({ width, height }: { width: React.ReactText; height: React.ReactText }) => React.ReactNode;\n}\n\nconst AutoSizer: React.FunctionComponent<IAutoSizer> = props => {\n  const { children, ...rest } = props;\n  const [ref, width = '100%', height = '100%'] = useResizeObserver();\n\n  return (\n    <Box {...rest} ref={ref}>\n      {children({ width, height })}\n    </Box>\n  );\n};\n\nexport { AutoSizer };\n","import * as React from 'react';\n\nimport { Box, IBox, ITheme, useTheme } from './';\n\nexport enum BadgeVariant {\n  Pill = 'pill',\n  Textual = 'textual',\n  Dot = 'dot',\n}\n\nexport enum BadgeColor {\n  Error = 'error',\n  Warning = 'warning',\n  Default = 'default',\n}\n\nexport interface IBadge extends IBox<HTMLSpanElement> {\n  variant?: BadgeVariant;\n  color?: BadgeColor;\n}\n\nconst Badge: React.FunctionComponent<IBadge> = props => {\n  const { color = BadgeColor.Default, variant = BadgeVariant.Pill, children, ...restProps } = props;\n\n  const { badge: theme } = useTheme();\n\n  return (\n    <Box {...restProps} as=\"span\" css={badgeStyles({ color, variant, theme })}>\n      {variant === BadgeVariant.Dot ? null : children}\n    </Box>\n  );\n};\n\nconst badgeStyles = ({\n  color,\n  variant,\n  theme,\n}: {\n  color: BadgeColor;\n  variant: BadgeVariant;\n  theme: ITheme['badge'];\n}) => {\n  return [\n    {\n      padding: '.25em 0',\n      fontSize: '75%',\n      fontWeight: 700,\n      lineHeight: 1,\n      borderRadius: '16px',\n      color: theme[color].fg,\n      backgroundColor: theme[color].bg,\n      margin: '0 2px',\n    },\n    variant === BadgeVariant.Textual && {\n      color: theme[color].bg,\n      backgroundColor: 'transparent',\n    },\n    variant === BadgeVariant.Pill && {\n      padding: '.25em .6em',\n    },\n    variant === BadgeVariant.Dot && {\n      padding: '0',\n      width: '8px',\n      height: '8px',\n      display: 'inline-block',\n    },\n  ];\n};\n\nexport { Badge };\n","import * as React from 'react';\nimport { Box, IBox } from './Box';\nimport { ITheme, useTheme } from './theme';\n\nexport interface IBlockQuote extends IBox<HTMLQuoteElement | HTMLElement> {}\n\nconst BlockQuote: React.FunctionComponent<IBlockQuote> = React.forwardRef<HTMLQuoteElement | HTMLElement, IBlockQuote>(\n  function BlockQuote(props, ref) {\n    const { as = 'blockquote', css, ...rest } = props;\n\n    const { blockQuote } = useTheme();\n\n    return <Box {...rest} as={as} ref={ref} css={[blockQuoteStyles(blockQuote), css]} />;\n  }\n);\n\nexport const blockQuoteStyles = (theme: ITheme['blockQuote']) => {\n  return {\n    color: theme.fg,\n    backgroundColor: theme.bg,\n    boxShadow: theme.shadow,\n    borderLeft: `6px solid ${theme.border}`,\n    padding: '20px 30px 20px 20px',\n    margin: 0,\n    borderRadius: 2,\n  };\n};\n\nBlockQuote.displayName = 'BlockQuote';\nexport { BlockQuote };\n","/* @jsx jsx */\n\nimport { Interpolation, jsx } from '@emotion/core';\nimport pickBy = require('lodash/pickBy');\nimport { CSSProperties, forwardRef, HTMLAttributes } from 'react';\nimport * as ss from 'styled-system';\n\nimport flattenDeep = require('lodash/flattenDeep');\n\nimport * as sl from './styles';\nimport { useTheme } from './theme';\nimport { validPropsPicker } from './utils/validPropsPicker';\n\nconst Box: React.FunctionComponent<IBox<HTMLOrSVGElement>> = forwardRef<HTMLOrSVGElement, IBox<HTMLOrSVGElement>>(\n  function Box(props, ref) {\n    /** Pull all props out of ...rest so that they don't show up on the rendered <div> as props (noisy) */\n    const {\n      as = 'div',\n      children,\n      style,\n      border,\n      borderTop,\n      borderBottom,\n      borderLeft,\n      borderRight,\n      borderRadius,\n      boxShadow,\n      boxSizing,\n      cursor,\n      display,\n      fontSize,\n      fontWeight,\n      fontStyle,\n      lineHeight,\n      letterSpacing,\n      m,\n      mt,\n      mb,\n      ml,\n      mr,\n      mx,\n      my,\n      p,\n      pt,\n      pb,\n      pl,\n      pr,\n      px,\n      py,\n      flex,\n      alignSelf,\n      textAlign,\n      textOverflow,\n      position,\n      top,\n      bottom,\n      left,\n      right,\n      zIndex,\n      height,\n      minHeight,\n      maxHeight,\n      width,\n      minWidth,\n      maxWidth,\n      opacity,\n      overflow,\n      overflowX,\n      overflowY,\n      textDecoration,\n      textDecorationColor,\n      textTransform,\n      color,\n      backgroundColor,\n      borderColor,\n      transform,\n      whiteSpace,\n      visibility,\n\n      css,\n      ...rest\n    } = props;\n\n    const theme = useTheme();\n\n    /** Add all the supported styles, passing in the relevant props. */\n    const styles: IBoxCSS = [\n      sl.color({ color, backgroundColor }),\n      ss.borders({ border, borderTop, borderBottom, borderLeft, borderRight }),\n      ss.borderRadius({ borderRadius }),\n      ss.borderColor({ borderColor }),\n      ss.boxShadow({ boxShadow }),\n      sl.boxSizing({ boxSizing }),\n      // requires theme\n      sl.space({ theme, m, mt, mb, ml, mr, mx, my, p, pt, pb, pl, pr, px, py }),\n      ss.flex({ flex }),\n      ss.alignSelf({ alignSelf }),\n\n      ss.textAlign({ textAlign }),\n      ss.lineHeight({ lineHeight }),\n      ss.fontSize({ fontSize }),\n      ss.fontWeight({ fontWeight }),\n      ss.fontStyle({ fontStyle }),\n      ss.letterSpacing({ letterSpacing }),\n\n      ss.display({ display }),\n      ss.height({ height }),\n      ss.minHeight({ minHeight }),\n      ss.maxHeight({ maxHeight }),\n      ss.width({ width }),\n      ss.minWidth({ minWidth }),\n      ss.maxWidth({ maxWidth }),\n\n      ss.position({ position }),\n      ss.top({ top }),\n      ss.bottom({ bottom }),\n      ss.left({ left }),\n      ss.right({ right }),\n      ss.zIndex({ zIndex }),\n\n      ss.opacity({ opacity }),\n\n      sl.textOverflow({ textOverflow }),\n      sl.transform({ transform }),\n      sl.textTransform({ textTransform }),\n      sl.textDecoration({ textDecoration, textDecorationColor }),\n      sl.cursor({ cursor }),\n      sl.visibility({ visibility }),\n      sl.overflow({ overflow, overflowX, overflowY }),\n      sl.whiteSpace({ whiteSpace }),\n    ];\n\n    /** Component provided defaults get pushed on first. */\n    if (css) styles.unshift(...flattenDeep<IBoxCSS>([css]));\n\n    /** User provided style get pushed on last. */\n    if (style) styles.push(style as IBoxCSS);\n\n    return jsx<Partial<IBox<HTMLOrSVGElement>>>(\n      as,\n      {\n        ...(typeof as === 'string' ? pickBy(rest, validPropsPicker) : rest),\n        ref,\n        css: styles,\n      },\n      children\n    );\n  }\n);\n\nBox.displayName = 'Box';\n\nexport interface IBox<T extends HTMLOrSVGElement = HTMLDivElement>\n  extends HTMLAttributes<T>,\n    sl.IColorProps,\n    sl.ITextDecorationProps,\n    sl.ITextTransformProps,\n    sl.ITextOverflowProps,\n    sl.IWhiteSpaceProps,\n    sl.IVisibilityProps,\n    sl.IOverflowProps,\n    sl.ICursorProps,\n    ss.BorderProps,\n    ss.BorderTopProps,\n    ss.BorderBottomProps,\n    ss.BorderLeftProps,\n    ss.BorderRightProps,\n    ss.BorderRadiusProps,\n    ss.BoxShadowProps,\n    sl.IBoxSizingProps,\n    ss.DisplayProps,\n    ss.FontSizeProps,\n    ss.FontWeightProps,\n    ss.FontStyleProps,\n    ss.LineHeightProps,\n    ss.LetterSpacingProps,\n    ss.SpaceProps,\n    ss.FlexProps,\n    ss.AlignSelfProps,\n    ss.TextAlignProps,\n    ss.PositionProps,\n    ss.TopProps,\n    ss.BottomProps,\n    ss.LeftProps,\n    ss.RightProps,\n    ss.ZIndexProps,\n    ss.HeightProps,\n    ss.MinHeightProps,\n    ss.MaxHeightProps,\n    ss.WidthProps,\n    ss.MinWidthProps,\n    ss.MaxWidthProps,\n    ss.OpacityProps {\n  as?: any;\n  children?: any;\n  style?: CSSProperties;\n  css?: IBoxCSS;\n  [key: string]: any;\n}\n\nexport type IBoxCSS = Interpolation | Interpolation[];\n\nexport { Box };\n","import * as React from 'react';\n\nimport { Box, IBox } from './Box';\n\nexport interface IBreak extends IBox<HTMLHRElement | HTMLElement> {\n  thickness?: number;\n}\n\nconst Break: React.FunctionComponent<IBreak> = React.forwardRef<HTMLHRElement | HTMLElement, IBreak>(function Break(\n  props,\n  ref\n) {\n  const { as = 'hr', thickness = 1, css, ...rest } = props;\n\n  return <Box {...rest} as={as} ref={ref} css={[breakStyles({ thickness }), css]} />;\n});\n\nexport const breakStyles = ({ thickness }: IBreak) => [\n  {\n    border: '0 none',\n    borderTop: `${thickness}px solid`,\n    height: 0,\n    margin: '0 auto',\n  },\n];\n\nBreak.displayName = 'Break';\n\nexport { Break };\n","import * as React from 'react';\n\nimport { IBoxCSS } from './Box';\nimport { Flex, IFlex } from './Flex';\nimport { ITheme, useTheme } from './theme';\n\n// TODO better active styling\n\nexport interface IButton extends IFlex {\n  disabled?: boolean;\n}\n\nconst Button: React.FunctionComponent<IButton> = React.forwardRef<HTMLButtonElement, IButton>(function Button(\n  props,\n  ref\n) {\n  const { as = 'button', css, ...rest } = props;\n\n  const { button } = useTheme();\n\n  return (\n    <Flex\n      px={11}\n      py={7}\n      borderRadius={2}\n      {...rest}\n      as={as}\n      ref={ref}\n      alignItems=\"center\"\n      css={[buttonStyles(button, props), css]}\n    />\n  );\n});\n\nButton.displayName = 'Button';\n\nexport const buttonStyles = (theme: ITheme['button'], { disabled }: IButton = {}): IBoxCSS => {\n  return [\n    {\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      borderColor: theme.border,\n\n      appearance: 'none',\n      cursor: 'pointer',\n\n      ':focus': {\n        outline: 'none',\n      },\n\n      ':hover': {\n        backgroundColor: theme.hoverBg,\n        color: theme.hoverFg,\n      },\n\n      ':active': {\n        borderStyle: 'solid',\n      },\n    },\n\n    disabled && {\n      opacity: 0.6,\n      cursor: 'not-allowed',\n\n      ':hover': {\n        backgroundColor: theme.bg,\n      },\n    },\n  ];\n};\n\nexport { Button };\n","import { Omit } from '@stoplight/types';\nimport * as React from 'react';\nimport { ChangeEventHandler, useCallback, useState } from 'react';\n\nimport { Box, Flex, IBox, IBoxCSS, ITheme, useTheme } from './';\nimport { Variant } from './types';\nimport { getVariant } from './utils/getVariant';\n\nexport interface ICheckbox extends Omit<IBox<HTMLLabelElement>, 'as|onChange'> {\n  checked?: boolean;\n  onChange?: (checked: boolean) => void;\n  variant?: Variant;\n}\n\nconst Checkbox: React.FunctionComponent<ICheckbox> = React.forwardRef<HTMLLabelElement, ICheckbox>(function Checkbox(\n  props,\n  ref\n) {\n  const { disabled: isDisabled, onChange, variant, ...rest } = props;\n\n  const { checkbox: baseTheme } = useTheme();\n\n  const [checked, setValue] = useState<boolean>(!!props.checked);\n  const isChecked = props.hasOwnProperty('checked') ? !!props.checked : checked;\n\n  const handleChange = useCallback<ChangeEventHandler<HTMLInputElement>>(({ target }) => {\n    setValue(target.checked);\n    if (onChange) onChange(target.checked);\n  }, []);\n\n  return (\n    <Flex {...rest} as=\"label\" ref={ref} css={checkboxStyles(baseTheme, { isDisabled, isChecked, variant })}>\n      <Box\n        as=\"input\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleChange}\n        position=\"absolute\"\n        css={{ clip: 'rect(1px, 1px, 1px, 1px)' }}\n      />\n      <svg aria-hidden=\"true\" viewBox=\"0 0 512 512\" width=\"10px\" height=\"10px\">\n        <path\n          fill=\"currentColor\"\n          d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"\n        />\n      </svg>\n    </Flex>\n  );\n});\n\nCheckbox.displayName = 'Checkbox';\nexport { Checkbox };\n\nexport const checkboxStyles = (\n  baseTheme: ITheme['checkbox'],\n  { isChecked, isDisabled, variant }: ICheckboxStyles\n): IBoxCSS => {\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  return [\n    {\n      color: theme.bg,\n      backgroundColor: theme.bg,\n      border: theme.border ? `1px solid ${theme.border}` : 'none',\n\n      height: '14px',\n      width: '14px',\n      margin: 0,\n      padding: 0,\n      borderRadius: '3px',\n      boxSizing: 'border-box',\n\n      cursor: 'pointer',\n      overflow: 'hidden',\n\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n\n      transition: 'background-color .15s ease-in-out',\n    },\n    isChecked && {\n      color: theme.fg,\n      backgroundColor: theme.checked,\n    },\n    isDisabled && {\n      opacity: 0.6,\n      cursor: 'not-allowed',\n    },\n  ];\n};\n\ninterface ICheckboxStyles {\n  isChecked: boolean;\n  isDisabled: boolean;\n  variant?: Variant;\n}\n","import { Omit } from '@stoplight/types';\nimport 'prismjs/components/';\nimport * as React from 'react';\nimport ReactSimpleCodeEditor from 'react-simple-code-editor';\nimport { Box, IBox } from '../Box';\nimport { codeStyles } from './styles';\nimport { highlightCode } from './utils/highlightCode';\n\nexport interface IEditor extends Omit<IBox, 'onChange'> {\n  value: string;\n  language: string;\n  onChange(code: string): any;\n}\n\nconst Editor: React.FunctionComponent<IEditor> = React.forwardRef<HTMLDivElement, IEditor>(function Editor(props, ref) {\n  const { autoFocus, language, onChange, value, css, ...rest } = props;\n  const highlight = React.useCallback(() => highlightCode(value, language), [value, language]);\n\n  return (\n    <Box {...rest} css={[codeEditorStyles(), css]}>\n      <ReactSimpleCodeEditor\n        autoFocus={autoFocus}\n        // @ts-ignore FIXME type erorr\n        ref={ref}\n        value={value}\n        onValueChange={onChange}\n        highlight={highlight}\n      />\n    </Box>\n  );\n});\n\nEditor.displayName = 'Editor';\n\nexport const codeEditorStyles = () => {\n  return [\n    ...codeStyles(),\n    {\n      textarea: {\n        '&:focus': {\n          outline: 'none',\n        },\n      },\n    },\n  ];\n};\n\nexport { Editor };\n","import 'prismjs';\nimport * as React from 'react';\n\nimport { Box, IBox } from '../Box';\nimport { codeStyles } from './styles';\nimport { astToReact } from './utils/astToReact';\nimport { parseCode } from './utils/parseCode';\n\nconst languageMaps: { [from: string]: string } = {\n  md: 'markdown',\n};\n\nexport interface IViewer extends IBox {\n  value: string;\n  language?: string;\n  showLineNumbers?: boolean;\n  inline?: boolean;\n}\n\nexport const Viewer: React.FunctionComponent<IViewer> = ({\n  language,\n  value,\n  showLineNumbers = false,\n  inline = false,\n  css,\n  ...rest\n}) => {\n  const codeCss = codeStyles({ inline, showLineNumbers });\n  const lang = (language && languageMaps[language]) || language;\n\n  if (inline) {\n    return (\n      <Box {...rest} css={[codeCss, css]} as=\"code\">\n        {value}\n      </Box>\n    );\n  }\n\n  const markup = parseCode(value, lang, showLineNumbers);\n\n  return (\n    <Box {...rest} as=\"pre\" css={[codeCss, css]}>\n      {markup ? markup.map(astToReact()) : value}\n    </Box>\n  );\n};\n","import { css } from '@emotion/core';\nimport { IBoxCSS } from '../Box';\nimport { useTheme } from '../theme';\n\nexport interface ICodeStyles {\n  inline?: boolean;\n  showLineNumbers?: boolean;\n}\n\nexport const codeStyles = ({ inline, showLineNumbers }: ICodeStyles = {}): IBoxCSS[] => {\n  const { code } = useTheme();\n\n  if (inline) {\n    return [\n      {\n        background: code.inlineBg,\n        color: code.inlineFg,\n        padding: '3px 4px',\n        margin: '0 2px',\n        borderRadius: 2,\n      },\n    ];\n  }\n\n  return [\n    {\n      background: code.bg,\n      ...(code.border && { border: `1px solid ${code.border}` }),\n      fontFamily: 'monospace',\n      padding: showLineNumbers ? `10px 20px 10px 0` : `15px 20px 15px 18px`,\n      whiteSpace: 'pre-wrap',\n      borderRadius: 5,\n    },\n    css`\n      counter-reset: line;\n\n      .namespace {\n        opacity: 0.7;\n      }\n\n      .line-number {\n        padding-left: 40px;\n        position: relative;\n        width: calc(100% - 40px);\n        display: block;\n\n        &::before {\n          content: '';\n          display: inline-block;\n          user-select: none;\n          opacity: 0.3;\n          text-align: right;\n          min-width: 25px;\n          position: absolute;\n          left: 0;\n          counter-increment: line;\n          content: counter(line);\n        }\n      }\n\n      .token {\n        &.comment,\n        &.prolog,\n        &.doctype,\n        &.cdata {\n          color: ${code.syntax.comment};\n        }\n\n        &.punctuation {\n          color: #9e9e9e;\n        }\n\n        &.property,\n        &.tag,\n        &.boolean,\n        &.number,\n        &.symbol,\n        &.deleted {\n          color: ${code.syntax.primary};\n        }\n\n        &.selector,\n        &.attr-name,\n        &.string,\n        &.char,\n        &.builtin,\n        &.inserted {\n          color: ${code.syntax.secondary};\n        }\n\n        &.operator,\n        &.entity,\n        &.url {\n          color: ${code.syntax.operator};\n        }\n\n        &.atrule,\n        &.attr-value,\n        &.keyword {\n          color: ${code.syntax.keyword};\n        }\n\n        &.function {\n          color: ${code.syntax.function};\n        }\n\n        &.variable {\n          color: ${code.syntax.variable};\n        }\n\n        &.regex,\n        &.important {\n          color: ${code.syntax.regex};\n        }\n\n        &.important,\n        &.bold {\n          font-weight: bold;\n        }\n\n        &.italic {\n          font-style: italic;\n        }\n\n        &.entity {\n          cursor: help;\n        }\n      }\n    `,\n  ];\n};\n","import { createElement, ReactNode } from 'react';\nimport { ASTNode } from '../types';\n\n// based on https://github.com/rexxars/react-lowlight/blob/master/src/mapChildren.js\nfunction mapChild(child: ASTNode, i: number, depth: number): ReactNode {\n  if (child.tagName) {\n    return createElement(\n      child.tagName,\n      {\n        key: `cv-${depth}-${i}`,\n        ...child.properties,\n        className: child.properties && (child.properties.className || []).join(' '),\n      },\n      child.children && child.children.map(astToReact(depth + 1))\n    );\n  }\n\n  return child.value;\n}\n\nexport function astToReact(depth: number = 0) {\n  return function mapChildrenWithDepth(child: ASTNode, i: number) {\n    return mapChild(child, i, depth);\n  };\n}\n","import { highlight, languages } from 'prismjs';\n\nexport const highlightCode = (code: string, language: string) => {\n  const langDef = languages[language];\n  return langDef ? highlight(code, langDef) : code;\n};\n","// based on https://github.com/FormidableLabs/prism-react-renderer\nimport { ASTNode } from '../types';\n\nconst newLineRegex = /\\n/g;\nfunction getNewLines(str: string) {\n  return str.match(newLineRegex);\n}\n\nfunction createLineElement({\n  children,\n  lineNumber,\n  className,\n}: {\n  children: ASTNode[];\n  lineNumber?: number;\n  className?: string[];\n}): ASTNode {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      className: lineNumber === undefined ? className : ['line-number'],\n    },\n    children,\n  };\n}\n\nfunction flattenCodeTree(tree: ASTNode[], className: string[] = []): ASTNode[] {\n  const newTree: ASTNode[] = [];\n  for (const node of tree) {\n    if (node.type === 'text') {\n      newTree.push(\n        createLineElement({\n          children: [node],\n          className,\n        })\n      );\n    } else if (node.children) {\n      const classNames = className.concat(node.properties!.className);\n      newTree.push(...flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nexport function lineNumberify(codeTree: ASTNode[]) {\n  const tree = flattenCodeTree(codeTree);\n  const newTree = [];\n  let lastLineBreakIndex = -1;\n  let index = 0;\n\n  while (index < tree.length) {\n    const node = tree[index];\n    const value = node.children![0].value!;\n    const newLines = getNewLines(value);\n\n    if (newLines) {\n      const splitValue = value.split('\\n');\n      splitValue.forEach((text, i) => {\n        const lineNumber = newTree.length + 1;\n        const newChild = { type: 'text', value: `${text}\\n` };\n\n        if (i === 0) {\n          const children = tree.slice(lastLineBreakIndex + 1, index).concat(\n            createLineElement({\n              children: [newChild],\n              className: node.properties!.className,\n            })\n          );\n          newTree.push(createLineElement({ children, lineNumber }));\n        } else if (i === splitValue.length - 1) {\n          const stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children![0];\n          if (stringChild) {\n            const lastLineInPreviousSpan = { type: 'text', value: `${text}` };\n            const newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties!.className,\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            newTree.push(\n              createLineElement({\n                children: [newChild],\n                lineNumber,\n                className: node.properties!.className,\n              })\n            );\n          }\n        } else {\n          newTree.push(\n            createLineElement({\n              children: [newChild],\n              lineNumber,\n              className: node.properties!.className,\n            })\n          );\n        }\n      });\n\n      lastLineBreakIndex = index;\n    }\n    index++;\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    const children = tree.slice(lastLineBreakIndex + 1, tree.length);\n    if (children && children.length) {\n      newTree.push(\n        createLineElement({\n          children,\n          lineNumber: newTree.length + 1,\n        })\n      );\n    }\n  }\n\n  return newTree;\n}\n","// @ts-ignore\nimport * as refractor from 'refractor';\nimport { lineNumberify } from './lineNumberify';\n\nfunction parsePlainText(code: string) {\n  return code.split('\\n').map((value, i, arr) => ({\n    type: 'element',\n    tagName: 'span',\n    properties: {},\n    children: [\n      {\n        type: 'text',\n        value: arr.length - 1 === i ? value : `${value}\\n`,\n      },\n    ],\n  }));\n}\n\nfunction safeParse(code: string, language?: string) {\n  if (language) {\n    try {\n      return refractor.highlight(code, language);\n    } catch (ex) {\n      // let's fallback to plain text\n    }\n  }\n\n  return parsePlainText(code);\n}\n\nexport function parseCode(code: string, language?: string, addLineNumbers?: boolean) {\n  try {\n    const ast = safeParse(code, language);\n    if (addLineNumbers) {\n      return lineNumberify(ast);\n    }\n\n    return ast;\n  } catch (ex) {\n    return null;\n  }\n}\n","import * as React from 'react';\nimport {\n  ContextMenu as ReactContextMenu,\n  ContextMenuTrigger,\n  MenuItem as ReactMenuItem,\n  SubMenu as ReactSubMenu,\n} from 'react-contextmenu';\n\nimport { Omit } from '@stoplight/types';\nimport { Box, Break, Flex, IBox, ITheme, Portal, useTheme } from './';\n\n// TODO: allow custom renderMenu\n// TODO: allow custom renderMenuItem?\n// TODO: add icon support to menu items\n// TODO: Context Menu should probably leverage/use MENU\n\n/**\n * CONTEXT MENU\n */\n\nexport interface IContextMenu extends IContextMenuView {\n  renderTrigger: (\n    ref: React.MutableRefObject<{\n      handleContextClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n      // TODO get event type\n      handleContextMenu: (e: any) => void;\n      handleMouseDown: (e: React.MouseEvent<HTMLDivElement>) => void;\n      handleMouseOut: (e: React.MouseEvent<HTMLDivElement>) => void;\n      handleMouseUp: (e: React.MouseEvent<HTMLDivElement>) => void;\n      handleTouchEnd: (e: React.TouchEvent<HTMLDivElement>) => void;\n      handleTouchstart: (e: React.TouchEvent<HTMLDivElement>) => void;\n    }>\n  ) => React.ReactNode | string;\n}\n\nconst ContextMenu: React.FunctionComponent<IContextMenu> = props => {\n  const { id, renderTrigger, ...rest } = props;\n\n  const contextTriggerRef = React.useRef<any>(null);\n\n  return (\n    <React.Fragment>\n      <ContextMenuTrigger id={id} ref={contextTriggerRef} holdToDisplay={-1}>\n        {renderTrigger(contextTriggerRef)}\n      </ContextMenuTrigger>\n      <ContextMenuView id={id} {...rest} />\n    </React.Fragment>\n  );\n};\n\nexport { ContextMenuTrigger };\n\n/**\n * MENU\n */\n\nexport interface IContextMenuView {\n  id: string;\n  className?: string;\n  blockExternalClicks?: boolean;\n\n  menuItems?: IContextMenuItem[];\n  hideOnLeave?: boolean;\n  onHide?: (event: any) => void;\n  onMouseLeave?: (event: React.MouseEvent<HTMLDivElement>) => void;\n  onShow?: (event: any) => void;\n}\n\nconst ContextMenuView: React.FunctionComponent<IContextMenuView> = props => {\n  const { menuItems = [], ...viewProps } = props;\n\n  const { contextMenu: theme } = useTheme();\n  const [isVisible, setIsVisible] = React.useState(false);\n\n  const onShow = React.useCallback<(event: unknown) => void>(\n    event => {\n      setIsVisible(true);\n      if (props.onShow) {\n        props.onShow(event);\n      }\n    },\n    [setIsVisible, props.onShow]\n  );\n\n  const onHide = React.useCallback<(event: unknown) => void>(\n    event => {\n      setIsVisible(false);\n      if (props.onHide) {\n        props.onHide(event);\n      }\n    },\n    [setIsVisible, props.onHide]\n  );\n\n  return (\n    <>\n      {props.blockExternalClicks && isVisible ? (\n        <Portal>\n          <Box\n            onClick={e => e.stopPropagation()}\n            width=\"100vw\"\n            height=\"100vh\"\n            position=\"fixed\"\n            top={0}\n            left={0}\n            zIndex={2 ** 31 - 3}\n            opacity={0}\n          />\n        </Portal>\n      ) : null}\n\n      <Box\n        {...viewProps}\n        zIndex={2 ** 31 - 2}\n        as={ReactContextMenu}\n        onShow={onShow}\n        onHide={onHide}\n        css={menuStyles(theme, menuItems.length > 0)}\n      >\n        {menuItems.map((item, index) => {\n          return <ContextMenuItem key={index} {...item} />;\n        })}\n      </Box>\n    </>\n  );\n};\n\nconst menuStyles = (theme: ITheme['contextMenu'], hasMenuItems: boolean) => {\n  // Only show context menu if we have items to show\n  if (!hasMenuItems) {\n    return [{ display: 'none' }];\n  }\n\n  return [\n    {\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      border: theme.border ? `1px solid ${theme.border}` : 'none',\n\n      borderRadius: '3px',\n      minWidth: '180px',\n      maxWidth: '280px',\n\n      ':focus': {\n        outline: '0 none',\n      },\n\n      // so submenus only appear when hovering over the correct item\n      '.react-contextmenu-submenu': {\n        '.react-contextmenu': { display: 'none' },\n        '.react-contextmenu--visible': { display: 'block' },\n      },\n    },\n  ];\n};\n\n/**\n * MENUITEM\n */\n\ntype ContextMenuTitle = { title?: string; shortcut?: never } | { title: string; shortcut?: string };\n\nexport type IContextMenuItem = ContextMenuTitle &\n  Omit<IBox, 'onClick'> & {\n    data?: Object;\n    divider?: boolean;\n    disabled?: boolean;\n    preventClose?: boolean;\n    onClick?: (\n      event: React.TouchEvent<HTMLDivElement> | React.MouseEvent<HTMLDivElement>,\n      data: Object,\n      target: HTMLElement\n    ) => void | Function;\n    menuItems?: IContextMenuItem[];\n  };\n\nconst ContextMenuItem: React.FunctionComponent<IContextMenuItem> = props => {\n  const {\n    attributes,\n    data,\n    title,\n    shortcut,\n    divider,\n    disabled,\n    preventClose,\n    onClick,\n    menuItems = [],\n    ...rest\n  } = props;\n  const { contextMenu: theme } = useTheme();\n\n  const isSubMenu = menuItems.length > 0;\n\n  const menuItem = (\n    <Box\n      {...rest}\n      css={contextMenuItemStyles(theme, { onClick, divider, disabled })}\n      as={(asProps: object) => (\n        <ReactMenuItem\n          attributes={asProps}\n          data={data}\n          preventClose={preventClose}\n          disabled={disabled}\n          onClick={onClick}\n        >\n          <Flex alignItems=\"center\" justifyContent=\"space-around\">\n            {title ? <Box flex={1}>{title}</Box> : null}\n            {shortcut ? (\n              <Box opacity={0.5} fontSize=\"0.8rem\">\n                {shortcut}\n              </Box>\n            ) : null}\n            {isSubMenu ? (\n              <Box pl=\"6px\" fontSize=\"10px\">\n                &#9658;\n              </Box>\n            ) : null}\n          </Flex>\n\n          {divider ? <Break thickness={1} m=\"5px\" color={theme.border} /> : null}\n        </ReactMenuItem>\n      )}\n    />\n  );\n\n  if (isSubMenu) {\n    return (\n      <Box\n        {...rest}\n        css={menuStyles(theme, true)}\n        as={({ className }: { className: string }) => {\n          return (\n            <ReactSubMenu\n              title={menuItem}\n              className={className} // className on the resulting submenu Menu\n            >\n              {menuItems.map((item, index) => {\n                return <ContextMenuItem key={index} {...item} />;\n              })}\n            </ReactSubMenu>\n          );\n        }}\n      />\n    );\n  }\n\n  return menuItem;\n};\n\nexport const contextMenuItemStyles = (\n  theme: ITheme['contextMenu'],\n  { onClick, divider, disabled }: IContextMenuItem\n) => {\n  return [\n    {\n      padding: '10px 14px',\n      fontSize: '14px',\n      borderRadius: '2px',\n\n      ':hover': {\n        background: theme.hoverBg,\n      },\n      ':focus': {\n        outline: '0 none',\n      },\n    },\n    onClick && {\n      cursor: 'pointer',\n    },\n    disabled && {\n      opacity: 0.6,\n      cursor: 'not-allowed',\n    },\n    (divider || disabled) && {\n      ':hover': {\n        background: 'inherit',\n        color: 'inherit',\n      },\n    },\n  ];\n};\n\nexport { ContextMenu, ContextMenuView, ContextMenuItem };\n","import * as React from 'react';\n\nimport { Box, IBox } from './Box';\nimport { Flex } from './Flex';\nimport { Overlay } from './Overlay';\nimport { Portal } from './Portal';\nimport { ITheme, useTheme } from './theme';\n\nexport interface IDialog extends IBox<HTMLElement> {\n  show?: boolean;\n  onClickOutside?: React.ReactEventHandler<HTMLElement>;\n}\n\nconst Dialog: React.FunctionComponent<IDialog> = React.forwardRef<HTMLElement, IDialog>(function Dialog(props, ref) {\n  const { children, show, onClickOutside, onClick, css, ...rest } = props;\n\n  const { dialog } = useTheme();\n\n  const onOverlayClick = React.useCallback<React.MouseEventHandler<HTMLElement>>(e => {\n    if (onClickOutside !== undefined) {\n      onClickOutside(e);\n    }\n  }, []);\n\n  const onBoxClick = React.useCallback<React.MouseEventHandler<HTMLElement>>(e => {\n    e.stopPropagation();\n    if (onClick !== undefined) {\n      onClick(e);\n    }\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <Portal>\n      <Overlay as={Flex} alignItems=\"center\" justifyContent=\"center\" onClick={onOverlayClick}>\n        <Box {...rest} ref={ref} onClick={onBoxClick} css={[dialogStyles(dialog), css]}>\n          {children}\n        </Box>\n      </Overlay>\n    </Portal>\n  );\n});\n\nDialog.displayName = 'Dialog';\n\nexport const dialogStyles = (dialog: ITheme['dialog']) => {\n  return {\n    color: dialog.fg,\n    backgroundColor: dialog.bg,\n    border: dialog.border ? `1px solid ${dialog.border}` : 'none',\n\n    // these ensure our dialog content won't leave the screen\n    maxWidth: '95vw',\n    maxHeight: '95vh',\n  };\n};\n\nexport { Dialog };\n","import flattenDeep = require('lodash/flattenDeep');\nimport * as React from 'react';\nimport * as ss from 'styled-system';\n\nimport { Box, IBox } from './Box';\nimport * as sl from './styles';\n\nexport interface IFlex<T extends HTMLOrSVGElement = HTMLElement>\n  extends IBox<T>,\n    ss.FlexBasisProps,\n    ss.FlexDirectionProps,\n    ss.FlexWrapProps,\n    ss.AlignItemsProps,\n    ss.JustifyContentProps {}\n\nconst Flex: React.FunctionComponent<IFlex> = React.forwardRef<HTMLOrSVGElement, IFlex>(function Flex(props, ref) {\n  const { flexBasis, flexFlow, flexDirection, flexWrap, alignItems, justifyContent, css, ...rest } = props;\n\n  const styles = [\n    ...flattenDeep([css]),\n    ss.flexBasis({ flexBasis }),\n    ss.flexDirection({ flexDirection }),\n    ss.flexWrap({ flexWrap }),\n    ss.alignItems({ alignItems }),\n    ss.justifyContent({ justifyContent }),\n    sl.flexFlow({ flexFlow }),\n    flexStyles(),\n  ];\n\n  return <Box {...rest} ref={ref} css={styles} />;\n});\n\nFlex.displayName = 'Flex';\n\nexport const flexStyles = () => ({ display: 'flex' });\n\nexport { Flex };\n","import { Omit } from '@stoplight/types';\nimport * as React from 'react';\n\nimport { IText, Text } from './Text';\n\nexport interface IHeading extends Omit<IText<HTMLHeadingElement>, 'as'> {\n  as?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n}\n\nconst Heading: React.FunctionComponent<IHeading> = React.forwardRef<HTMLHeadingElement, IHeading>(function Heading(\n  props,\n  ref\n) {\n  const { as = 'h2', css, ...rest } = props;\n\n  return <Text {...rest} as={as} ref={ref} css={[headingStyles(), css]} />;\n});\n\nHeading.displayName = ' Heading';\n\nconst headingStyles = () => ({ magin: '0', fontWeight: 900 });\n\nexport { Heading };\n","import * as React from 'react';\n\nimport {\n  FaSymbol,\n  FlipProp,\n  IconProp,\n  library,\n  PullProp,\n  RotateProp,\n  Transform,\n} from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Box, IBox } from './Box';\n\nexport { IconProp, FlipProp, PullProp, RotateProp, Transform, FaSymbol } from '@fortawesome/fontawesome-svg-core';\n\nexport const IconLibrary = library;\n\nexport interface IIcon extends IBox<HTMLOrSVGElement> {\n  icon: IconProp;\n  mask?: IconProp;\n  spin?: boolean;\n  pulse?: boolean;\n  fixedWidth?: boolean;\n  inverse?: boolean;\n  listItem?: boolean;\n  flip?: FlipProp;\n  pull?: PullProp;\n  rotation?: RotateProp;\n  transform?: string | Transform;\n  symbol?: FaSymbol;\n}\n\nconst Icon: React.FunctionComponent<IIcon> = React.forwardRef<HTMLOrSVGElement, IIcon>(function Icon(props, ref) {\n  const { css, ...rest } = props;\n  return <Box {...rest} as={FontAwesomeIcon} ref={ref} css={[iconStyles(), css]} />;\n});\n\nIcon.displayName = 'Icon';\n\nconst iconStyles = () => [{ background: 'transparent' }];\n\nexport { Icon };\n","import * as React from 'react';\n\nimport { Box, IBox } from './Box';\n\nexport interface IImage extends IBox<HTMLImageElement> {\n  hidden?: boolean;\n  responsive?: boolean;\n}\n\nconst Image: React.FunctionComponent<IImage> = React.forwardRef<HTMLImageElement, IImage>(function Image(props, ref) {\n  const { hidden, responsive, css, ...rest } = props;\n\n  return <Box {...rest} as=\"img\" ref={ref} css={imageStyles({ hidden, responsive, css })} />;\n});\n\nImage.displayName = 'Image';\n\nexport const imageStyles = ({ hidden, responsive, css }: IImage = {}) => [\n  hidden && {\n    display: 'none',\n  },\n\n  responsive && {\n    width: 'auto',\n    height: 'auto',\n    maxWidth: '100%',\n    maxHeight: '100%',\n  },\n\n  css,\n];\n\nexport { Image };\n","import * as React from 'react';\n\nimport { Omit } from '@stoplight/types';\nimport noop = require('lodash/noop');\nimport AutosizeInput from 'react-input-autosize';\n\nimport { Box, IBox } from './Box';\nimport { ITheme, useTheme } from './theme';\nimport { Variant } from './types';\nimport { getVariant } from './utils/getVariant';\n\nexport interface IInput extends Omit<IBox<HTMLInputElement>, 'as'> {\n  autosize?: boolean;\n  variant?: Variant;\n}\n\nexport interface IAutosizeInput {\n  className?: string;\n}\n\nconst AutosizeWrapper: React.FunctionComponent<IAutosizeInput> = React.forwardRef<HTMLInputElement, IAutosizeInput>(\n  ({ className, ...props }, ref) => (\n    // @ts-ignore\n    <AutosizeInput {...props} ref={ref} inputClassName={className} placeholderIsMinWidth />\n  )\n);\n\nconst Input: React.FunctionComponent<IInput> = React.forwardRef<HTMLInputElement, IInput>(function Input(props, ref) {\n  const { autosize, onChange = noop, type, invalid, css, ...rest } = props;\n\n  const { input: theme } = useTheme();\n\n  // TODO: do we want controlled mode here?\n  const [value, setValue] = React.useState(props.value);\n  const internalValue = props.hasOwnProperty('value') ? props.value : value;\n\n  // FIXME: might not work with boolean inputs such as radio/checkbox\n  const handleChange = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n    e => {\n      setValue(e.target.value);\n      onChange(e);\n    },\n    [onChange, setValue]\n  );\n\n  return (\n    <Box\n      p=\"10px\"\n      borderRadius={2}\n      overflow=\"hidden\"\n      textOverflow=\"ellipsis\"\n      whiteSpace=\"nowrap\"\n      {...rest}\n      as={autosize ? AutosizeWrapper : 'input'}\n      ref={ref}\n      type={type}\n      value={internalValue}\n      onChange={handleChange}\n      css={inputStyles(theme, props)}\n    />\n  );\n});\n\nInput.displayName = 'Input';\n\nconst inputStyles = (baseTheme: ITheme['input'], { disabled, variant, css }: IInput) => {\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  return [\n    {\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      border: theme.border ? `1px solid ${theme.border}` : 'none',\n\n      boxSizing: 'border-box',\n\n      ':focus': {\n        outline: 'none',\n      },\n    },\n\n    disabled && {\n      opacity: 0.6,\n      cursor: 'not-allowed',\n    },\n\n    css,\n  ];\n};\n\nexport { Input };\n","import * as React from 'react';\nimport { Box, IBox, IBoxCSS } from './Box';\nimport { ITheme, useTheme } from './theme';\n\nexport interface ILink extends IBox<HTMLAnchorElement> {}\n\nconst Link: React.FunctionComponent<ILink> = React.forwardRef<HTMLAnchorElement, ILink>(function Link(props, ref) {\n  const { css, ...rest } = props;\n\n  const { link } = useTheme();\n\n  return <Box {...rest} as=\"a\" ref={ref} css={linkStyles(link, css)} />;\n});\n\nexport const linkStyles = (theme: ITheme['link'], css: IBoxCSS) => {\n  return [\n    {\n      color: theme.fg,\n      textDecoration: 'none',\n      padding: '0 3px',\n    },\n    theme.bg && {\n      backgroundColor: theme.bg,\n    },\n    theme.hoverBg && {\n      ':hover': {\n        backgroundColor: theme.hoverBg,\n      },\n    },\n    theme.hoverFg && {\n      ':hover': {\n        color: theme.hoverFg,\n      },\n    },\n    theme.visitedFg && {\n      ':visited': {\n        color: theme.visitedFg,\n      },\n    },\n    theme.border && {\n      borderBottom: `1px solid ${theme.border}`,\n    },\n    theme.hoverBorder && {\n      ':hover': {\n        borderColor: theme.hoverBorder,\n      },\n    },\n    css,\n  ];\n};\n\nLink.displayName = 'Link';\nexport { Link };\n","import { Omit } from '@stoplight/types';\nimport * as React from 'react';\n\nimport { Box, IBox } from './Box';\nimport * as sl from './styles';\n\nexport interface IList extends sl.IListStyleProps, Omit<IBox<HTMLUListElement | HTMLOListElement>, 'as'> {\n  as?: 'ul' | 'ol';\n}\n\nconst List: React.FunctionComponent<IList> = React.forwardRef<HTMLUListElement | HTMLOListElement, IList>(function List(\n  props,\n  ref\n) {\n  const { as = 'ul', listStyle, listStylePosition, css, ...rest } = props;\n\n  return <Box {...rest} as={as} ref={ref} css={[listStyles({ listStyle, listStylePosition }), css]} />;\n});\n\nList.displayName = 'List';\n\nexport const listStyles = ({ listStyle, listStylePosition }: IList) => {\n  return sl.listStyle({ listStyle, listStylePosition });\n};\n\nexport { List };\n","import * as React from 'react';\n\nimport { Box, IBoxCSS } from './Box';\nimport { Flex, IFlex } from './Flex';\nimport { useHover } from './hooks/useHover';\nimport { Icon, IIcon } from './Icon';\nimport { ITheme, useTheme } from './theme';\n\n// TODO allow dividers in the menu\n\n/**\n * MENU\n */\n\nexport declare type RenderMenuItemFunc = (item: IMenuItem, index: number, items: IMenuItem[]) => React.ReactNode;\nexport declare type RenderMenuFunc = (\n  css: IFlex['css'],\n  menuItems: IMenuItem[],\n  renderMenuItem: RenderMenuItemFunc\n) => React.ReactNode;\n\nconst defaultRenderMenuItem: RenderMenuItemFunc = (item: IMenuItem, index: number) => {\n  return <MenuItem key={index} {...item} />;\n};\n\nconst defaultRenderMenu: RenderMenuFunc = (styles, menuItems, renderMenuItem) => {\n  return (\n    <Flex css={styles} key=\"menu-items\">\n      {menuItems.map(renderMenuItem)}\n    </Flex>\n  );\n};\n\nexport interface IMenu extends IFlex {\n  menuItems: IMenuItem[];\n  renderTrigger?: (isShown: boolean) => React.ReactNode;\n  renderMenuItem?: RenderMenuItemFunc;\n  hideDelay?: number;\n  posY?: 'top' | 'bottom';\n  posX?: 'left' | 'right' | 'center';\n  offset?: {\n    x?: number;\n    y?: number;\n  };\n}\n\nconst Menu: React.FunctionComponent<IMenu> = React.forwardRef<HTMLOrSVGElement, IMenu>(function Menu(props, ref) {\n  const {\n    menuItems,\n    posX = 'center',\n    posY = 'bottom',\n    offset,\n    renderTrigger,\n    renderMenuItem = defaultRenderMenuItem,\n    renderMenu = defaultRenderMenu,\n    hideDelay = 200,\n    key,\n    ...rest\n  } = props;\n\n  const { menu: theme } = useTheme();\n\n  const [isShown, handlers] = useHover(false, props, hideDelay);\n\n  const styles = menuStyles();\n  const listStyles = menuListStyles(theme, {\n    posX,\n    posY,\n    offset,\n    hasTrigger: !!renderTrigger,\n  });\n\n  return (\n    <Box key={key} ref={ref} css={styles} {...rest} {...handlers}>\n      {renderTrigger && renderTrigger(isShown)}\n      {(!renderTrigger || isShown) && renderMenu(listStyles, menuItems, renderMenuItem)}\n    </Box>\n  );\n});\n\nMenu.displayName = 'Menu';\n\nexport const menuListStyles = (\n  theme: ITheme['menu'],\n  { hasTrigger, posX, posY, offset }: Partial<IMenu> & { hasTrigger: boolean }\n) => {\n  return [\n    {\n      flexDirection: 'column',\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      border: `1px solid ${theme.border}`,\n      borderRadius: '4px',\n      zIndex: 10000,\n      position: hasTrigger ? 'absolute' : 'relative',\n      margin: offset && `${offset.y || 0}px ${offset.x || 0}px`,\n    },\n    posY === 'bottom' ? { top: '100%' } : { bottom: '100%' },\n    posX === 'center' && {\n      left: '50%',\n      transform: 'translateX(-50%)',\n    },\n    posX === 'left' && { right: '100%' },\n    posX === 'right' && { left: '100%' },\n  ];\n};\n\nexport const menuStyles = (): IBoxCSS => {\n  return [\n    {\n      display: 'inline-flex',\n      position: 'relative',\n      width: 'auto',\n      overflow: 'visible',\n      whiteSpace: 'nowrap',\n    },\n  ];\n};\n/**\n * MENU ITEM\n */\n\nexport interface IMenuItem extends Pick<IFlex, Exclude<keyof IFlex, 'title'>> {\n  title?: React.ReactNode;\n  subtitle?: React.ReactNode;\n  icon?: IIcon['icon'];\n  disabled?: boolean;\n  onClick?: IFlex['onClick'];\n}\n\nconst MenuItem: React.FunctionComponent<IMenuItem> = React.forwardRef<HTMLOrSVGElement, IMenuItem>(function MenuItem(\n  props,\n  ref\n) {\n  const { icon, title, subtitle, onClick, disabled, ...rest } = props;\n\n  const { menu: theme } = useTheme();\n  const styles = menuItemStyles(theme, { disabled, onClick });\n\n  return (\n    <Flex {...rest} ref={ref} onClick={onClick} css={styles}>\n      {icon && (\n        <Flex key=\"menu-icon\" alignItems=\"center\" justifyContent=\"center\" width=\"20px\" pr={title || subtitle ? 10 : 0}>\n          <Icon icon={icon} />\n        </Flex>\n      )}\n      {(title || subtitle) && (\n        <span key=\"menu-title\">\n          {title && <span>{title}</span>}\n          {subtitle && <span>{subtitle}</span>}\n        </span>\n      )}\n    </Flex>\n  );\n});\n\nMenuItem.displayName = 'MenuItem';\n\nconst menuItemStyles = (theme: ITheme['menu'], { disabled, onClick }: Partial<IMenuItem>): IBoxCSS => {\n  return [\n    {\n      alignItems: 'center',\n      padding: '6px 10px',\n      cursor: disabled ? 'not-allowed' : onClick ? 'pointer' : 'default',\n      opacity: disabled ? 0.6 : 1,\n\n      ':hover': {\n        backgroundColor: theme.hoverBg,\n      },\n    },\n  ];\n};\n\nexport { Menu, MenuItem };\n","import * as React from 'react';\nimport { Box, IBox, IBoxCSS } from './Box';\nimport { ITheme, useTheme } from './theme';\n\nexport interface IOverlay extends IBox<HTMLElement> {}\n\nconst Overlay: React.FunctionComponent<IOverlay> = React.forwardRef<HTMLElement, IOverlay>(function Overlay(\n  props,\n  ref\n) {\n  const { overlay: theme } = useTheme();\n\n  return <Box {...props} ref={ref} css={overlayStyles(theme)} />;\n});\n\nOverlay.displayName = 'Overlay';\n\nexport const overlayStyles = (theme: ITheme['overlay']): IBoxCSS => {\n  return {\n    position: 'fixed',\n    left: '0',\n    top: '0',\n    height: '100vh',\n    width: '100vw',\n    backgroundColor: theme.bg,\n    zIndex: 2 ** 31 - 2, // maximum 32bit int - 1 (offset, so that you can still override the overlay just in case)\n  };\n};\n\nexport { Overlay };\n","import * as React from 'react';\n\nimport { useWindowResize } from '../hooks/useWindowResize';\nimport { useTheme } from '../theme';\nimport { PopupContent } from './PopupContent';\nimport { IPopupDefaultProps, IPopupProps } from './types';\nimport { calculateStyles, getDefaultStyle, getInitialStyle } from './utils';\n\nexport { IPopupProps, IPopupDefaultProps };\n\nexport interface IPopup extends IPopupProps {}\n\nconst Popup: React.FunctionComponent<IPopup> = props => {\n  const { hideDelay, width, offset, posX, posY, show = false } = props;\n\n  const theme = useTheme();\n\n  const controlled = 'show' in props;\n  const triggerRef = React.useRef<HTMLElement>(null);\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const [visibility, setVisibility] = React.useState<boolean>(false);\n  const isVisible = controlled ? show : visibility;\n  const lastResizeTimestamp = useWindowResize();\n  const [style, setStyle] = React.useState<React.CSSProperties>(getInitialStyle(props));\n  let isOverTrigger: boolean = false;\n  let isOverContent: boolean = false;\n  let willHide: NodeJS.Timer | number | null = null;\n\n  const repaint = React.useCallback(() => {\n    if (isVisible) {\n      setStyle({\n        ...getDefaultStyle(props),\n        ...calculateStyles(triggerRef, contentRef, props),\n      });\n    }\n  }, [triggerRef.current, contentRef.current, width, offset, posX, posY, isVisible]);\n\n  if (typeof window !== 'undefined') {\n    React.useEffect(repaint, [lastResizeTimestamp, contentRef.current]);\n  }\n\n  const showPopup = React.useCallback(() => {\n    if (controlled) return;\n    if (willHide !== null) {\n      clearTimeout(willHide as number);\n      willHide = null;\n    }\n\n    setVisibility(true);\n  }, [willHide, isVisible, controlled]);\n\n  const hidePopup = React.useCallback(() => {\n    if (willHide !== null || controlled) {\n      return;\n    }\n\n    willHide = setTimeout(() => {\n      isOverTrigger = false;\n      isOverContent = false;\n      setVisibility(false);\n    }, hideDelay);\n  }, [willHide, isVisible, controlled]);\n\n  const { renderTrigger, renderContent } = props;\n\n  const funcs = {\n    isVisible,\n    showPopup,\n    hidePopup,\n  };\n\n  const handleMouseEnter = React.useCallback<React.MouseEventHandler<HTMLElement>>(\n    ({ target }) => {\n      if (target === triggerRef.current) {\n        isOverTrigger = true;\n      } else if (target === contentRef.current) {\n        isOverContent = true;\n      }\n\n      showPopup();\n    },\n    [triggerRef.current, contentRef.current, isVisible]\n  );\n\n  const handleMouseLeave = React.useCallback<React.MouseEventHandler<HTMLElement>>(\n    ({ target }) => {\n      if (target === triggerRef.current) {\n        isOverTrigger = false;\n      } else if (target === contentRef.current) {\n        isOverContent = false;\n      }\n\n      if (isVisible && !isOverTrigger && !isOverContent) {\n        hidePopup();\n      }\n    },\n    [triggerRef.current, contentRef.current, isVisible]\n  );\n\n  return (\n    <>\n      {React.cloneElement(\n        renderTrigger({\n          ...funcs,\n          isOver: isOverTrigger,\n        }),\n        {\n          ref: triggerRef,\n          onMouseEnter: handleMouseEnter,\n          onMouseLeave: handleMouseLeave,\n        }\n      )}\n      {isVisible && (\n        <PopupContent\n          ref={contentRef}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          style={style}\n          repaint={repaint}\n        >\n          {renderContent({\n            ...funcs,\n            isOver: isOverContent,\n            theme,\n          })}\n        </PopupContent>\n      )}\n    </>\n  );\n};\n\nPopup.displayName = 'Popup';\n\nPopup.defaultProps = {\n  padding: 15,\n  hideDelay: 200,\n  posX: 'left',\n  posY: 'top',\n} as IPopupDefaultProps;\n\nexport { Popup };\n","import * as React from 'react';\n\nimport { Portal } from '../Portal';\nimport { IPopupContentProps } from './types';\n\nconst PopupContent: React.FunctionComponent<IPopupContentProps & { ref?: any }> = React.forwardRef<\n  HTMLDivElement,\n  IPopupContentProps\n>(function PopupContent(props, ref) {\n  const { children, onMouseEnter, onMouseLeave, repaint, style } = props;\n\n  React.useEffect(repaint, []);\n\n  return (\n    <Portal>\n      <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} ref={ref} style={style}>\n        {children}\n      </div>\n    </Portal>\n  );\n});\n\nPopupContent.displayName = 'PopupContent';\nexport { PopupContent };\n","export * from './Popup';\n","import { CSSProperties, RefObject } from 'react';\nimport { IPopupPositionOffset, IPopupProps } from './types';\n\nconst getOffset = (offset?: IPopupPositionOffset) =>\n  Object.assign(\n    {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n    },\n    offset || null\n  );\n\nexport const getDefaultStyle = ({ width, padding }: IPopupProps): CSSProperties => ({\n  position: 'fixed',\n  zIndex: 999,\n  padding,\n  width,\n  opacity: 1,\n  transition: 'opacity 0.2s',\n});\n\nexport const getInitialStyle = (args: IPopupProps): CSSProperties => ({\n  ...getDefaultStyle(args),\n  opacity: 0,\n});\n\nexport const calculateStyles = (\n  trigger: RefObject<HTMLElement>,\n  content: RefObject<HTMLDivElement>,\n  props: IPopupProps\n): CSSProperties | null => {\n  if (!trigger.current || !content.current) return null;\n\n  const offset = getOffset(props.offset);\n\n  // TODO: smart choice based on content size and screen space if props.posX not defined\n  let posX = props.posX;\n\n  // TODO: smart choice based on content size and screen space if props.posY not defined\n  const posY = props.posY;\n\n  // calculate the tooltip position\n  // this style object will be passed to the renderContent function\n  const style: CSSProperties = {};\n\n  // where on the screen is the target\n  const triggerDimensions = trigger.current.getBoundingClientRect();\n\n  // where on the screen is the content, and some basics on its size\n  const contentDimensions = content.current.getBoundingClientRect();\n  const contentWidth = props.width || contentDimensions.width;\n\n  style.minWidth = triggerDimensions.width + 25;\n\n  if (posY === 'center') {\n    if (posX === 'left') {\n      posX = 'right';\n    } else {\n      posX = 'left';\n    }\n  }\n\n  if (posX === 'left' || posX === 'center') {\n    style.left = triggerDimensions.left;\n\n    if (posX === 'center') {\n      // center align the popup by taking both the target and popup widths into account\n      style.left += triggerDimensions.width / 2 - contentWidth / 2;\n    } else {\n      style.left -= props.padding;\n\n      // room for tip\n      if (posY === 'center') {\n        style.left += triggerDimensions.width + props.padding;\n      }\n    }\n\n    // account for desired offsets\n    style.left += offset.left || 0;\n    style.left -= offset.right || 0;\n\n    // make sure it doesn't poke off the left side of the page\n    style.left = Math.max(0, style.left);\n\n    let clientWidth = 0;\n    if (typeof document !== 'undefined') {\n      clientWidth = document.body.clientWidth;\n    }\n\n    // or off the right\n    style.left = Math.min(style.left, clientWidth - contentWidth - 5);\n  } else {\n    // right\n    // coming in from the right of the screen\n    style.right = window.innerWidth - triggerDimensions.left - triggerDimensions.width - props.padding;\n\n    // room for tip\n    if (posY === 'center') {\n      style.right += triggerDimensions.width + props.padding;\n    }\n\n    // account for desired offsets\n    style.right -= offset.left;\n    style.right += offset.right;\n\n    // TODO: make sure it doesn't poke off the left side of the page\n\n    // or off the right\n    style.right = Math.max(0, style.right);\n  }\n\n  if (posY === 'top') {\n    // when positioning above, set the bottom of the popup just above the top of the target (it will stretch upwards)\n    style.bottom = window.innerHeight - triggerDimensions.top + offset.bottom;\n  } else if (posY === 'bottom') {\n    // when positioning below, position the top of the popup just below the target (it will stretch downwards)\n    style.top = triggerDimensions.top + triggerDimensions.height + offset.top;\n  } else {\n    style.top = style.top = triggerDimensions.top + triggerDimensions.height / 2 - contentDimensions.height / 2;\n\n    style.top += offset.top;\n    style.top -= offset.bottom;\n  }\n\n  if (style.top) {\n    // make sure it doesn't poke off the bottom of the page\n    style.top = Math.min(window.innerHeight - contentDimensions.height, style.top as number);\n\n    // make sure it doesn't poke off the top of the page\n    style.top = Math.max(0, style.top);\n\n    if (style.top + contentDimensions.height > window.innerHeight) {\n      style.bottom = 0;\n      style.overflow = 'auto';\n    }\n  } else if (style.bottom) {\n    // make sure it doesn't poke off the top of the page\n    style.bottom = Math.min(window.innerHeight, style.bottom as number);\n\n    // make sure it doesn't poke off the top of the page\n    style.bottom = Math.max(0, style.bottom);\n\n    if (style.bottom + contentDimensions.height > window.innerHeight) {\n      style.top = 0;\n      style.overflow = 'auto';\n    }\n  }\n\n  return style;\n};\n","import * as React from 'react';\nimport { ReactPortal } from 'react';\nimport * as ReactDOM from 'react-dom';\n\nexport interface IPortalProps {\n  children: any;\n  className?: string;\n}\n\nexport class Portal extends React.PureComponent<IPortalProps> {\n  private readonly el?: HTMLDivElement;\n  private readonly root = typeof document === 'object' ? document.body : null;\n\n  constructor(props: IPortalProps) {\n    super(props);\n\n    if (typeof document === 'undefined' || typeof document.createElement !== 'function') return;\n\n    this.el = document.createElement('div');\n\n    if (props.className !== undefined) {\n      this.el.className = props.className;\n    }\n  }\n\n  public componentDidMount() {\n    if (this.el !== undefined && this.root !== null) {\n      this.root.appendChild(this.el);\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.el !== undefined && this.root !== null) {\n      this.root.removeChild(this.el);\n    }\n  }\n\n  private renderChildren = () => {\n    const { children } = this.props;\n\n    if (typeof children === 'function') {\n      return children();\n    }\n\n    return React.Children.map(this.props.children, child => React.cloneElement(child));\n  };\n\n  public render(): ReactPortal | null {\n    if (this.el === undefined) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(this.renderChildren(), this.el);\n  }\n}\n","import * as React from 'react';\nimport Scrollbars, { positionValues, ScrollbarProps } from 'react-custom-scrollbars';\n\nimport { Box, IBox } from './Box';\nimport { useScrollToHash } from './hooks/useScrollToHash';\nimport { ITheme, useTheme } from './theme';\nimport { getScrollTransform, getThumbDimension, horizontalTrackStyle, verticalTrackStyle } from './utils/scroll';\n\n/**\n * THUMB\n * this is the actual bar\n */\ninterface IScrollBoxThumb extends IBox<HTMLDivElement> {\n  isScrolling: boolean;\n}\n\nconst ScrollbarThumb: React.FunctionComponent<IScrollBoxThumb> = React.forwardRef<HTMLDivElement, IScrollBoxThumb>(\n  function ScrollbarThumb(props, ref) {\n    const { isScrolling, css, ...rest } = props;\n\n    const { scrollbar: theme } = useTheme();\n\n    return <Box {...rest} ref={ref} css={[scrollbarStyles(theme, { isScrolling }), css]} />;\n  }\n);\n\nScrollbarThumb.displayName = 'ScrollbarThumb';\n\nconst scrollbarStyles = (theme: ITheme['scrollbar'], { isScrolling }: IScrollBoxThumb) => {\n  return {\n    backgroundColor: theme.bg,\n    borderRadius: '5px',\n    cursor: 'grab',\n    opacity: isScrolling ? 1 : 0,\n    transition: 'opacity .1s',\n  };\n};\n\n/**\n * SCROLLBOX\n */\n\nexport interface IScrollBox extends ScrollbarProps {\n  innerRef?: React.RefObject<Scrollbars>;\n\n  autoHeight?: boolean;\n  autoHideTimeout?: number;\n  onUpdate?: (values: positionValues) => void;\n\n  // can scroll to an anchor/id\n  scrollTo?: string;\n}\n\nconst ScrollBox: React.FunctionComponent<IScrollBox> = (props: IScrollBox) => {\n  // pull out scrollTo so they are not in scrollbarProps (don't want them spread onto <Scrollbars /> component)\n  const { scrollTo, children, onUpdate, autoHeight = true, autoHideTimeout = 500, innerRef, ...scrollbarProps } = props;\n\n  const [isScrolling, setIsScrolling] = React.useState<null | number | NodeJS.Timer>(null);\n  useScrollToHash(scrollTo);\n\n  const scrollbars = innerRef || React.useRef<Scrollbars>(null);\n  const position = (scrollbars.current && scrollbars.current.getValues()) || ({} as positionValues);\n  const { clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth } = position;\n\n  const thumbHorizontal = getThumbDimension({ scroll: scrollWidth, client: clientWidth }) || 0;\n  const thumbVertical = getThumbDimension({ scroll: scrollHeight, client: clientHeight }) || 0;\n\n  return (\n    <Scrollbars\n      {...scrollbarProps}\n      ref={scrollbars}\n      autoHideTimeout={autoHideTimeout}\n      autoHeight={autoHeight}\n      onUpdate={onUpdate}\n      onScroll={(e: any) => {\n        if (isScrolling !== null) {\n          clearTimeout(isScrolling as number);\n        }\n\n        setIsScrolling(\n          setTimeout(() => {\n            setIsScrolling(null);\n          }, autoHideTimeout)\n        );\n      }}\n      renderView={({ style }: any) => {\n        // overide to offset the native scroll bars\n        return (\n          <div\n            style={{\n              ...style,\n              marginRight: '-15px',\n              marginBottom: '-15px',\n            }}\n          />\n        );\n      }}\n      // Custom component overrides\n      renderTrackHorizontal={() => <div style={horizontalTrackStyle()} />}\n      renderThumbHorizontal={() => (\n        <ScrollbarThumb\n          isScrolling={isScrolling !== null}\n          height=\"6px\"\n          width={thumbHorizontal}\n          transform={`translateX(${getScrollTransform(clientWidth, scrollWidth, scrollLeft, thumbHorizontal)}px)`}\n        />\n      )}\n      renderTrackVertical={() => <div style={verticalTrackStyle()} />}\n      renderThumbVertical={() => (\n        <ScrollbarThumb\n          isScrolling={isScrolling !== null}\n          height={thumbVertical}\n          width=\"6px\"\n          transform={`translateY(${getScrollTransform(clientHeight, scrollHeight, scrollTop, thumbVertical)}px)`}\n        />\n      )}\n    >\n      {children}\n    </Scrollbars>\n  );\n};\n\nScrollBox.displayName = 'ScrollBox';\n\nexport { Scrollbars as IScrollbars, ScrollBox };\n","/* @jsx jsx */\nimport { css as cssx, jsx } from '@emotion/core';\nimport { forwardRef } from 'react';\nimport * as ReactWindow from 'react-window';\n\nimport { AutoSizer } from './AutoSizer';\nimport { IBoxCSS } from './Box';\nimport { ITheme, useTheme } from './theme';\n\nexport {\n  areEqual,\n  shouldComponentUpdate,\n  ListItemKeySelector,\n  FixedSizeList as IFixedSizeList,\n  VariableSizeList as IVariableSizeList,\n} from 'react-window';\n\nexport interface IFixedSizeListProps extends ReactWindow.FixedSizeListProps {\n  css?: IBoxCSS;\n}\n\nexport interface IVariableSizeListProps extends ReactWindow.VariableSizeListProps {\n  css?: IBoxCSS;\n}\n\nconst FixedSizeList: React.FunctionComponent<IFixedSizeListProps> = forwardRef<\n  ReactWindow.FixedSizeList,\n  IFixedSizeListProps\n>(function FixedSizeList(props, ref) {\n  const { scrollbar: theme } = useTheme();\n  const { width, height, css, ...rest } = props;\n\n  return (\n    <AutoSizer width={width} height={height}>\n      {({ width: listWidth, height: listHeight }) => (\n        <ReactWindow.FixedSizeList\n          {...rest}\n          ref={ref}\n          css={scrollListStyles(theme, css)}\n          height={listHeight}\n          width={listWidth}\n        />\n      )}\n    </AutoSizer>\n  );\n});\n\nFixedSizeList.displayName = 'FixedSizeList';\n\nconst VariableSizeList: React.FunctionComponent<IVariableSizeListProps> = forwardRef<\n  ReactWindow.VariableSizeList,\n  IVariableSizeListProps\n>(function VariableSizeList(props, ref) {\n  const { width, height, css, ...rest } = props;\n  const { scrollbar: theme } = useTheme();\n\n  return (\n    <AutoSizer width={width} height={height}>\n      {({ width: listWidth, height: listHeight }) => (\n        <ReactWindow.VariableSizeList\n          {...rest}\n          ref={ref}\n          css={scrollListStyles(theme, css)}\n          height={listHeight}\n          width={listWidth}\n        />\n      )}\n    </AutoSizer>\n  );\n});\n\nVariableSizeList.displayName = 'VariableSizeList';\n\nexport const scrollListStyles = (theme: ITheme['scrollbar'], css?: IBoxCSS) => {\n  return [\n    cssx`\n      &::-webkit-scrollbar {\n        height: 6px;\n        background-color: transparent;\n        width: 6px;\n      }\n\n      &::-webkit-scrollbar-thumb {\n        background-color: ${theme.bg};\n        border-radius: 10px;\n      }\n\n      scrollbar-color: ${theme.bg} transparent;\n      scrollbar-width: thin;\n    `,\n    css,\n  ];\n};\n\nexport { FixedSizeList, VariableSizeList };\n","import * as React from 'react';\nimport { ReactEventHandler } from 'react';\nimport ReactSelect from 'react-select';\nimport ReactAsyncSelect, { Props as AsyncProps } from 'react-select/lib/Async'; // we can live with it, as it adds very little overhead (just a wrapper around Select)\nimport ReactAsyncCreatableSelect from 'react-select/lib/AsyncCreatable';\nimport ReactCreatableSelect, { Props as CreatableProps } from 'react-select/lib/Creatable';\nimport { Props } from 'react-select/lib/Select';\n\nimport { Omit } from '@stoplight/types';\nimport { ITheme, useTheme } from './theme';\nimport { Variant } from './types';\nimport { getVariant } from './utils/getVariant';\n\n// renamed some props from https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react-select/lib/Select.d.t\nexport interface ISelectBaseProps {\n  loading?: boolean; // isLoading\n  disabled?: boolean; // isDisabled\n  multi?: boolean; // isMulti\n  clearable?: boolean; // isClearable\n\n  searchable?: boolean; // isSearchable\n  searchValue?: string; // inputValue\n\n  isOpen?: boolean; // menuIsOpen\n\n  onOpen?: () => void; // onMenuOpen\n  onClose?: () => void; // onMenuClose\n  onSearch?: (value: string) => void; // onInputChange\n  onScrollToTop?: ReactEventHandler<HTMLElement>; // onMenuScrollToTop\n  onScrollToBottom?: ReactEventHandler<HTMLElement>; // onMenuScrollToBottom\n\n  loadingMessage?: string;\n  noOptionsMessage?: string;\n\n  blurOnSelect?: boolean; // blurInputOnSelect\n  closeOnSelect?: boolean;\n  closeOnScroll?: boolean;\n\n  allowCreate?: boolean;\n  variant?: Variant;\n}\n\nexport interface ISelectProps\n  extends ISelectBaseProps,\n    Omit<Props<ISelectOption>, 'noOptionsMessage' | 'loadingMessage'> {}\n\nexport interface ISelectAsyncProps\n  extends ISelectBaseProps,\n    Omit<AsyncProps<ISelectOption>, 'noOptionsMessage' | 'loadingMessage'> {}\n\nexport interface ISelectCreatableProps\n  extends ISelectBaseProps,\n    Omit<CreatableProps<ISelectOption>, 'noOptionsMessage' | 'loadingMessage'> {}\n\nexport type ISelectAsyncCreatableProps = ISelectCreatableProps & ISelectAsyncProps;\n\nexport type ISelect = ISelectProps | ISelectAsyncProps | ISelectCreatableProps | ISelectAsyncCreatableProps;\n\nexport interface ISelectOption {\n  label: string;\n  value: any;\n}\n\nconst Select: React.FunctionComponent<ISelect> = props => {\n  const {\n    multi,\n    loading,\n    disabled,\n    clearable,\n    searchable,\n    searchValue,\n    isOpen,\n\n    onOpen,\n    onClose,\n    onSearch,\n    onScrollToTop,\n    onScrollToBottom,\n\n    blurOnSelect = !props.multi,\n    closeOnSelect = !props.multi,\n    closeOnScroll = false,\n\n    loadingMessage = 'Loading...',\n    noOptionsMessage = 'No Options',\n\n    allowCreate = false,\n    variant = Variant.Default,\n\n    ...selectProps\n  } = props;\n\n  const { select: theme } = useTheme();\n\n  const actualProps = {\n    blurInputOnSelect: blurOnSelect,\n    closeMenuOnSelect: closeOnSelect,\n    closeMenuOnScroll: closeOnScroll,\n    inputValue: searchValue,\n    isClearable: clearable,\n    isDisabled: disabled,\n    isLoading: loading,\n    isMulti: multi,\n    menuIsOpen: isOpen,\n    isSearchable: searchable,\n    loadingMessage: () => loadingMessage,\n    noOptionsMessage: () => noOptionsMessage,\n    onInputChange: onSearch,\n    onMenuOpen: onOpen,\n    onMenuClose: onClose,\n    onMenuScrollToTop: onScrollToTop,\n    onMenuScrollToBottom: onScrollToBottom,\n    ...selectProps,\n    // CUSTOM STYLES\n    styles: selectProps.styles || selectStyles(theme, variant),\n  };\n\n  if ('loadOptions' in props && ('onCreateOption' in props || allowCreate)) {\n    return <ReactAsyncCreatableSelect {...actualProps} />;\n  }\n\n  if ('loadOptions' in props) {\n    return <ReactAsyncSelect {...actualProps} />;\n  }\n\n  if ('onCreateOption' in props || allowCreate) {\n    return <ReactCreatableSelect {...actualProps} />;\n  }\n\n  return <ReactSelect {...actualProps} />;\n};\n\n/**\n * Component styles copied from React-Select\n * removed most of the non-color, spacing, border related styles\n * override color related\n */\n\nexport const selectStyles = (baseTheme: ITheme['select'], variant: Variant) => {\n  if (!baseTheme) {\n    return {};\n  }\n\n  const { chip: chipTheme, menu: menuTheme } = baseTheme;\n\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  return {\n    clearIndicator: (provided: any, { isDisabled }: { isDisabled: boolean }) => ({\n      ...provided,\n      color: theme.border || theme.fg,\n      padding: '0px',\n\n      ':hover': {\n        color: theme.border || theme.fg,\n        opacity: !isDisabled && 0.6,\n      },\n    }),\n    container: (provided: any) => ({\n      ...provided,\n      pointerEvents: null,\n    }),\n    control: (provided: any, { isDisabled }: { isDisabled: boolean }) => ({\n      ...provided,\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      border: theme.border ? `1px solid ${theme.border}` : 'none',\n\n      minWidth: '147px',\n      minHeight: '35px',\n      padding: '0px 5px 0px 10px',\n      boxSizing: 'border-box',\n      fontSize: '11px',\n\n      borderRadius: '2px',\n      boxShadow: null,\n      outline: '0 !important',\n\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      opacity: isDisabled && 0.6,\n\n      ':hover': {\n        borderColor: theme.border,\n      },\n    }),\n    dropdownIndicator: (provided: any, { isDisabled }: { isDisabled: boolean }) => ({\n      ...provided,\n      color: theme.border || theme.fg,\n\n      padding: '0px',\n\n      ':hover': {\n        color: theme.border || theme.fg,\n        opacity: !isDisabled && 0.6,\n      },\n    }),\n    indicatorSeparator: (provided: any) => ({\n      ...provided,\n      backgroundColor: theme.border || theme.fg,\n      marginLeft: '5px',\n      marginRight: '5px',\n    }),\n    input: (provided: any, { isDisabled }: { isDisabled: false }) => ({\n      ...provided,\n      color: theme.fg,\n\n      padding: '0px',\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      userSelect: 'none',\n    }),\n    loadingIndicator: (provided: any) => ({\n      ...provided,\n      color: theme.border || theme.fg,\n      padding: '0px',\n    }),\n    loadingMessage: (provided: any) => ({\n      ...provided,\n      color: menuTheme.fg,\n      padding: '0px',\n      fontSize: '14px',\n    }),\n    menu: (provided: any) => ({\n      ...provided,\n      color: menuTheme.fg,\n      backgroundColor: menuTheme.bg,\n      border: menuTheme.border ? `1px solid ${menuTheme.border}` : 'none',\n\n      zIndex: 10000,\n      padding: '5px 7px',\n      borderRadius: '3px',\n      minWidth: '180px',\n      maxWidth: '280px',\n      boxShadow: 'none',\n    }),\n    multiValue: (provided: any) => ({\n      ...provided,\n      alignItems: 'center',\n      color: chipTheme.fg,\n      backgroundColor: chipTheme.bg,\n      fontWeight: 500,\n      margin: '0px 5px 0px 0px',\n      borderRadius: '3px',\n      overflow: 'hidden',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: chipTheme.border,\n    }),\n    multiValueLabel: (provided: any) => ({\n      ...provided,\n      color: chipTheme.fg,\n      backgroundColor: chipTheme.bg,\n      borderRadius: '0px',\n    }),\n    multiValueRemove: (provided: any) => ({\n      ...provided,\n      color: chipTheme.fg,\n      backgroundColor: chipTheme.bg,\n\n      paddingLeft: '0px',\n      borderRadius: '0px',\n\n      ':hover': {\n        color: chipTheme.fg,\n        backgroundColor: chipTheme.bg,\n      },\n    }),\n    noOptionsMessage: (provided: any) => ({\n      ...provided,\n      color: menuTheme.fg,\n      fontSize: '14px',\n      padding: '0px',\n    }),\n    option: (\n      provided: React.CSSProperties,\n      { isMulti, isSelected }: Partial<{ isMulti: boolean; isSelected: boolean }>\n    ) => {\n      return {\n        ...provided,\n\n        padding: '5px 7px',\n        fontSize: '14px',\n        borderRadius: '2px',\n\n        cursor: isMulti || !isSelected ? 'pointer' : 'default',\n\n        color: menuTheme.fg,\n        backgroundColor: isSelected ? menuTheme.selectedBg : 'transparent',\n\n        // provide some affordance on touch devices\n        ':active': {\n          backgroundColor: isSelected ? menuTheme.selectedBg : menuTheme.hoverBg,\n        },\n\n        ':hover': {\n          backgroundColor: isSelected ? menuTheme.selectedBg : menuTheme.hoverBg,\n        },\n      };\n    },\n    placeholder: (provided: any) => ({\n      ...provided,\n      color: theme.fg,\n\n      opacity: 0.6,\n    }),\n    singleValue: (provided: any) => ({\n      ...provided,\n      color: theme.fg,\n      padding: '0px',\n    }),\n\n    valueContainer: (provided: any) => ({\n      ...provided,\n      padding: '0px',\n    }),\n  };\n};\n\n/**\n * React-Select Styles\n * Copied over the styles from each component that are overridable, this will serve as a quick reference to what is actually being applied to the components by default\n */\n\n// const ReactSelectStyles = {\n//   clearIndicator: {\n//     color: isFocused ? colors.neutral60 : colors.neutral20,\n//     display: 'flex',\n//     padding: baseUnit * 2,\n//     transition: 'color 150ms',\n\n//     ':hover': {\n//       color: isFocused ? colors.neutral80 : colors.neutral40,\n//     },\n//   },\n\n//   container: {\n//     direction: isRtl ? 'rtl' : null,\n//     pointerEvents: isDisabled ? 'none' : null, // cancel mouse events when disabled\n//     position: 'relative',\n//   },\n\n//   control: {\n//     alignItems: 'center',\n//     backgroundColor: isDisabled ? colors.neutral5 : colors.neutral0,\n//     borderColor: isDisabled ? colors.neutral10 : isFocused ? colors.primary : colors.neutral20,\n//     borderRadius: borderRadius,\n//     borderStyle: 'solid',\n//     borderWidth: 1,\n//     boxShadow: isFocused ? `0 0 0 1px ${colors.primary}` : null,\n//     cursor: 'default',\n//     display: 'flex',\n//     flexWrap: 'wrap',\n//     justifyContent: 'space-between',\n//     minHeight: spacing.controlHeight,\n//     outline: '0 !important',\n//     position: 'relative',\n//     transition: 'all 100ms',\n\n//     '&:hover': {\n//       borderColor: isFocused ? colors.primary : colors.neutral30,\n//     },\n//   },\n\n//   dropdownIndicator: {\n//     color: isFocused ? colors.neutral60 : colors.neutral20,\n//     display: 'flex',\n//     padding: baseUnit * 2,\n//     transition: 'color 150ms',\n\n//     ':hover': {\n//       color: isFocused ? colors.neutral80 : colors.neutral40,\n//     },\n//   },\n\n//   group: {\n//     paddingBottom: spacing.baseUnit * 2,\n//     paddingTop: spacing.baseUnit * 2,\n//   },\n\n//   groupHeading: {\n//     color: '#999',\n//     cursor: 'default',\n//     display: 'block',\n//     fontSize: '75%',\n//     fontWeight: '500',\n//     marginBottom: '0.25em',\n//     paddingLeft: spacing.baseUnit * 3,\n//     paddingRight: spacing.baseUnit * 3,\n//     textTransform: 'uppercase',\n//   },\n\n//   indicatorsContainer: {\n//     alignItems: 'center',\n//     alignSelf: 'stretch',\n//     display: 'flex',\n//     flexShrink: 0,\n//   },\n\n//   indicatorSeparator: {\n//     alignSelf: 'stretch',\n//     backgroundColor: isDisabled ? colors.neutral10 : colors.neutral20,\n//     marginBottom: baseUnit * 2,\n//     marginTop: baseUnit * 2,\n//     width: 1,\n//   },\n\n//   input: {\n//     margin: spacing.baseUnit / 2,\n//     paddingBottom: spacing.baseUnit / 2,\n//     paddingTop: spacing.baseUnit / 2,\n//     visibility: isDisabled ? 'hidden' : 'visible',\n//     color: colors.neutral80,\n//   },\n\n//   loadingIndicator: {\n//     color: isFocused ? colors.neutral60 : colors.neutral20,\n//     display: 'flex',\n//     padding: baseUnit * 2,\n//     transition: 'color 150ms',\n//     alignSelf: 'center',\n//     fontSize: size,\n//     lineHeight: 1,\n//     marginRight: size,\n//     textAlign: 'center',\n//     verticalAlign: 'middle',\n//   },\n\n//   loadingMessage: {\n//     color: colors.neutral40,\n//     padding: `${baseUnit * 2}px ${baseUnit * 3}px`,\n//     textAlign: 'center',\n//   },\n\n//   menu: {\n//     [alignToControl(placement)]: '100%',\n//     backgroundColor: colors.neutral0,\n//     borderRadius: borderRadius,\n//     boxShadow: '0 0 0 1px hsla(0, 0%, 0%, 0.1), 0 4px 11px hsla(0, 0%, 0%, 0.1)',\n//     marginBottom: spacing.menuGutter,\n//     marginTop: spacing.menuGutter,\n//     position: 'absolute',\n//     width: '100%',\n//     zIndex: 1,\n//   },\n\n//   menuList: {\n//     maxHeight,\n//     overflowY: 'auto',\n//     paddingBottom: baseUnit,\n//     paddingTop: baseUnit,\n//     position: 'relative', // required for offset[Height, Top] > keyboard scroll\n//     WebkitOverflowScrolling: 'touch',\n//   },\n\n//   menuPortal: {},\n//   multiValue: {\n//     backgroundColor: colors.neutral10,\n//     borderRadius: borderRadius / 2,\n//     display: 'flex',\n//     margin: spacing.baseUnit / 2,\n//     minWidth: 0, // resolves flex/text-overflow bug\n//   },\n\n//   multiValueLabel: {\n//     borderRadius: borderRadius / 2,\n//     color: colors.neutral80,\n//     fontSize: '85%',\n//     overflow: 'hidden',\n//     padding: 3,\n//     paddingLeft: 6,\n//     textOverflow: cropWithEllipsis ? 'ellipsis' : null,\n//     whiteSpace: 'nowrap',\n//   },\n\n//   multiValueRemove: {\n//     borderRadius: borderRadius / 2,\n//     color: colors.neutral80,\n//     fontSize: '85%',\n//     overflow: 'hidden',\n//     padding: 3,\n//     paddingLeft: 6,\n//     textOverflow: cropWithEllipsis ? 'ellipsis' : null,\n//     whiteSpace: 'nowrap',\n//   },\n\n//   noOptionsMessage: {\n//     color: colors.neutral40,\n//     padding: `${baseUnit * 2}px ${baseUnit * 3}px`,\n//     textAlign: 'center',\n//   },\n\n//   option: {\n//     backgroundColor: isSelected ? colors.primary : isFocused ? colors.primary25 : 'transparent',\n//     color: isDisabled ? colors.neutral20 : isSelected ? colors.neutral0 : 'inherit',\n//     cursor: 'default',\n//     display: 'block',\n//     fontSize: 'inherit',\n//     padding: `${spacing.baseUnit * 2}px ${spacing.baseUnit * 3}px`,\n//     width: '100%',\n//     userSelect: 'none',\n//     WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',\n\n//     // provide some affordance on touch devices\n//     ':active': {\n//       backgroundColor: isSelected ? colors.primary : colors.primary50,\n//     },\n//   },\n\n//   placeholder: {\n//     color: colors.neutral50,\n//     marginLeft: spacing.baseUnit / 2,\n//     marginRight: spacing.baseUnit / 2,\n//     position: 'absolute',\n//     top: '50%',\n//     transform: 'translateY(-50%)',\n//   },\n\n//   singleValue: {\n//     color: isDisabled ? colors.neutral40 : colors.neutral80,\n//     marginLeft: spacing.baseUnit / 2,\n//     marginRight: spacing.baseUnit / 2,\n//     maxWidth: `calc(100% - ${spacing.baseUnit * 2}px)`,\n//     overflow: 'hidden',\n//     position: 'absolute',\n//     textOverflow: 'ellipsis',\n//     whiteSpace: 'nowrap',\n//     top: '50%',\n//     transform: 'translateY(-50%)',\n//   },\n\n//   valueContainer: {\n//     alignItems: 'center',\n//     display: 'flex',\n//     flex: 1,\n//     flexWrap: 'wrap',\n//     padding: `${spacing.baseUnit / 2}px ${spacing.baseUnit * 2}px`,\n//     WebkitOverflowScrolling: 'touch',\n//     position: 'relative',\n//     overflow: 'hidden',\n//   },\n// };\n\nexport { Select };\n","import { Omit } from '@stoplight/types';\nimport * as React from 'react';\n\nimport { Box, IBox, IBoxCSS } from './Box';\nimport { ITheme, useTheme } from './theme';\n\n/**\n * TABLE\n */\n\nexport interface ITable extends IBox<HTMLTableElement> {\n  isSelected?: boolean;\n}\n\nconst Table: React.FunctionComponent<ITable> = React.forwardRef<HTMLTableElement, ITable>(function Table(props, ref) {\n  const { children, isSelected, css, ...rest } = props;\n\n  const { table: theme } = useTheme();\n\n  return (\n    <Box {...rest} as=\"table\" ref={ref} css={[tableStyles(theme, { isSelected }), css]}>\n      <tbody>{children}</tbody>\n    </Box>\n  );\n});\n\nTable.displayName = 'Table';\n\nexport const tableStyles = (theme: ITheme['table'], { isSelected }: ITable): IBoxCSS => {\n  return [\n    {\n      border: '1px solid',\n      borderCollapse: 'collapse',\n      borderColor: theme.border,\n      tr: {\n        '&:first-of-type': {\n          fontWeight: 'bold',\n        },\n      },\n    },\n    isSelected && {\n      boxShadow: theme.shadow,\n    },\n  ];\n};\n\n/**\n * TABLE ROW\n */\n\nexport interface ITableRow extends IBox<HTMLTableRowElement> {}\n\nconst TableRow: React.FunctionComponent<ITableRow> = React.forwardRef<HTMLTableRowElement, ITableRow>(function TableRow(\n  props,\n  ref\n) {\n  const { table: theme } = useTheme();\n  return <Box {...props} as=\"tr\" ref={ref} css={tableRowStyles(theme)} />;\n});\n\nexport const tableRowStyles = (theme: ITheme['table']) => {\n  return [\n    {\n      border: '0 none',\n      borderBottom: '1px solid',\n      borderColor: theme.border,\n      '&:last-child': {\n        borderBottom: '0 none',\n      },\n      '&:nth-of-type(even)': {\n        backgroundColor: theme.evenBg,\n      },\n    },\n  ];\n};\n\nTableRow.displayName = 'TableRow';\n\n/**\n * TABLE CELL\n */\n\nexport interface ITableCell extends Omit<IBox<HTMLTableDataCellElement>, 'as'> {\n  as?: 'th' | 'td';\n}\n\nconst TableCell: React.FunctionComponent<ITableCell> = React.forwardRef<HTMLTableDataCellElement, ITableCell>(\n  function TableCell(props, ref) {\n    const { as = 'td', isSelected, textAlign, ...rest } = props;\n    const { table: theme } = useTheme();\n    return <Box {...rest} as={as} ref={ref} css={tableCellStyles(theme, { as, isSelected, textAlign })} />;\n  }\n);\n\nTableCell.displayName = 'TableCell';\n\nconst textAlignPadding = {\n  left: '10px 40px 10px 15px',\n  center: '10px 15px 10px 15px',\n  right: '10px 15px 10px 40px',\n};\n\nexport const tableCellStyles = (theme: ITheme['table'], { isSelected, textAlign = 'left' }: ITableCell): IBoxCSS => {\n  return [\n    {\n      border: '0 none',\n      borderLeft: '1px solid',\n      borderRight: '1px solid',\n      borderColor: theme.border,\n      textAlign,\n      padding: textAlignPadding[textAlign],\n      '&:first-of-type': {\n        borderLeft: '0 none',\n      },\n      '&:last-child': {\n        borderRight: '0 none',\n      },\n    },\n    isSelected && {\n      boxShadow: theme.shadow,\n    },\n  ];\n};\n\nexport { Table, TableRow, TableCell };\n","/* @jsx jsx */\n\nimport { ClassNames, jsx } from '@emotion/core';\nimport { Dictionary } from '@stoplight/types';\nimport * as React from 'react';\nimport { Tab, TabProps } from 'react-tabs';\n\nimport { IBoxCSS } from '..';\nimport { ITheme, useTheme } from '../theme';\n\nconst StyledTab: React.FunctionComponent<TabProps> & { tabsRole: string } = props => {\n  const { tabs: theme } = useTheme();\n\n  const styles = tabStyles(theme);\n\n  const { children, ref, ...rest } = props;\n\n  return (\n    <ClassNames>\n      {({ css: getClassName }) => (\n        <Tab\n          {...rest}\n          className={getClassName(styles.tabStyle)}\n          disabledClassName={getClassName(styles.disabledTabStyle)}\n          selectedClassName={getClassName(styles.selectedTabStyle)}\n        >\n          {children}\n        </Tab>\n      )}\n    </ClassNames>\n  );\n};\n\nStyledTab.tabsRole = 'Tab';\n\nconst tabStyles = (theme: ITheme['tabs']): Dictionary<IBoxCSS> => {\n  return {\n    tabStyle: {\n      display: 'inline-block',\n      border: `1px solid ${theme.border}`,\n      fontWeight: 'bold',\n      bottom: '-1px',\n      position: 'relative',\n      listStyle: 'none',\n      padding: '8px 15px',\n      cursor: 'pointer',\n      backgroundColor: theme.bg,\n      color: theme.fg,\n      zIndex: 2,\n      marginLeft: -1,\n\n      ':first-of-type': {\n        borderTopLeftRadius: '3px',\n        marginLeft: 0,\n      },\n\n      ':last-of-type': {\n        borderTopRightRadius: '3px',\n      },\n\n      ':focus': {\n        outline: 'none',\n      },\n\n      ':hover': {\n        color: theme.selectedFg,\n      },\n    },\n\n    selectedTabStyle: {\n      backgroundColor: theme.selectedBg,\n      borderBottomColor: theme.selectedBg,\n      color: theme.selectedFg,\n    },\n\n    disabledTabStyle: {\n      cursor: 'default',\n      opacity: 0.5,\n    },\n  };\n};\n\nexport { StyledTab as Tab };\n","/* @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport * as React from 'react';\n\nimport { TabList, TabListProps } from 'react-tabs';\nimport { IBoxCSS } from '../Box';\n\nconst StyledTabList: React.FunctionComponent<TabListProps> & { tabsRole: string } = props => {\n  const { children, ref, ...rest } = props;\n\n  return (\n    <TabList {...rest} css={tabListStyle}>\n      {children}\n    </TabList>\n  );\n};\n\nStyledTabList.tabsRole = 'TabList';\n\nconst tabListStyle: IBoxCSS = {\n  margin: '0',\n  padding: '0',\n  userSelect: 'none',\n};\n\nexport { StyledTabList as TabList };\n","import { ClassNames } from '@emotion/core';\nimport * as React from 'react';\nimport { TabPanel, TabPanelProps } from 'react-tabs';\nimport { IBoxCSS } from '../Box';\nimport { ITheme, useTheme } from '../theme';\n\nconst StyledTabPanel: React.FunctionComponent<TabPanelProps> & { tabsRole: string } = props => {\n  const { children, ref, ...rest } = props;\n\n  const { tabs: theme } = useTheme();\n  const tabPanelCSS = tabPanelStyle(theme);\n\n  return (\n    <ClassNames>\n      {({ css: getClassName }) => (\n        <TabPanel\n          {...rest}\n          className={getClassName(tabPanelCSS)}\n          selectedClassName={getClassName(selectedTabPanelStyle)}\n        >\n          {children}\n        </TabPanel>\n      )}\n    </ClassNames>\n  );\n};\n\nStyledTabPanel.tabsRole = 'TabPanel';\n\nconst tabPanelStyle = (theme: ITheme['tabs']): IBoxCSS => {\n  return {\n    border: `1px solid ${theme.border}`,\n    display: 'none',\n    padding: '25px',\n    borderRadius: 3,\n  };\n};\n\nconst selectedTabPanelStyle = { display: 'block' };\n\nexport { StyledTabPanel as TabPanel };\n","import { Tabs } from 'react-tabs';\n\nimport { Tab } from './Tab';\nimport { TabList } from './TabList';\nimport { TabPanel } from './TabPanel';\n\nexport { Tabs, TabList, Tab, TabPanel };\n","import * as React from 'react';\n\nimport { Box, IBox } from './Box';\n\nexport interface IText<T extends HTMLElement = HTMLParagraphElement> extends IBox<T> {\n  leading?: IBox['lineHeight'];\n  casing?: IBox['textTransform'];\n  italic?: boolean;\n}\n\nconst Text: React.FunctionComponent<IText> = React.forwardRef<HTMLElement, IText>(function Text(props, ref) {\n  const { as = 'p', leading: lineHeight, casing: textTransform, tracking: letterSpacing, italic, css, ...rest } = props;\n\n  return (\n    <Box\n      {...rest}\n      letterSpacing={letterSpacing}\n      lineHeight={lineHeight}\n      textTransform={textTransform}\n      fontStyle={italic ? 'italic' : undefined}\n      as={as}\n      ref={ref}\n      css={[textStyles(), css]}\n    />\n  );\n});\n\nText.displayName = 'Text';\n\nexport const textStyles = () => ({\n  margin: '0',\n});\n\nexport { Text };\n","import * as React from 'react';\n\nimport { Omit } from '@stoplight/types';\nimport noop = require('lodash/noop');\nimport AutosizeTextarea from 'react-textarea-autosize';\n\nimport { Box, IBox, IBoxCSS } from './Box';\nimport { ITheme, useTheme } from './theme';\nimport { Variant } from './types';\nimport { getVariant } from './utils/getVariant';\n\nexport interface ITextarea extends Omit<IBox<HTMLTextAreaElement>, 'as'> {\n  autosize?: boolean;\n  variant?: Variant;\n}\n\nconst Textarea: React.FunctionComponent<ITextarea> = React.forwardRef<HTMLTextAreaElement, ITextarea>(function Textarea(\n  props,\n  ref\n) {\n  const { autosize, onChange = noop, variant, css, ...rest } = props;\n\n  const { textarea: theme } = useTheme();\n\n  // TODO: do we want controlled mode here?\n  const [value, setValue] = React.useState<string>(props.value || '');\n  const internalValue = props.hasOwnProperty('value') ? props.value : value;\n\n  const handleChange = (event: React.SyntheticEvent<HTMLTextAreaElement>) => {\n    setValue(event.currentTarget.value);\n    onChange(event);\n  };\n\n  return (\n    <Box\n      {...rest}\n      as={autosize ? AutosizeTextarea : 'textarea'}\n      ref={ref}\n      value={internalValue}\n      onChange={handleChange}\n      css={[textareaStyles(theme, props), css]}\n    />\n  );\n});\n\nTextarea.displayName = 'Textarea';\n\nexport const textareaStyles = (baseTheme: ITheme['textarea'], { autosize, disabled, variant }: ITextarea): IBoxCSS => {\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  return [\n    {\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      border: theme.border ? `1px solid ${theme.border}` : 'none',\n\n      // TODO the top/bottom padding is a rough estimation find a better solution\n      padding: '7px 10px',\n      minHeight: '30px',\n      minWidth: '147px',\n      lineHeight: '15px',\n      borderRadius: '3px',\n      boxSizing: 'border-box',\n\n      ':focus': {\n        outline: 'none',\n      },\n    },\n    disabled && {\n      opacity: 0.6,\n      cursor: 'not-allowed',\n    },\n    autosize && {\n      resize: 'none',\n    },\n  ];\n};\n\nexport { Textarea };\n","import { ClassNames } from '@emotion/core';\nimport { Omit } from '@stoplight/types';\nimport * as React from 'react';\n\nimport { ToastContainer as ReactToastContainer, ToastContainerProps as ReactToastContainerProps } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { IBoxCSS } from '../Box';\nimport { ITheme, useTheme } from '../theme';\nimport { IToastTransition, ToastTransitionMap } from './index';\n\n/*\n * TOAST CONTAINER\n */\nexport interface IToastContainer extends Omit<ReactToastContainerProps, 'transition'> {\n  transition?: IToastTransition;\n}\n\nexport const ToastContainer = (props: IToastContainer) => {\n  const { toast: theme } = useTheme();\n  const { transition = 'zoom', ...containerProps } = props;\n\n  return (\n    <ClassNames>\n      {({ css: getClassName }) => (\n        // @ts-ignore\n        <ReactToastContainer\n          progressClassName={getClassName(progressStyles(theme))}\n          toastClassName={getClassName(toastStyles())}\n          bodyClassName={getClassName(bodyStyles())}\n          closeOnClick={false}\n          position=\"bottom-right\"\n          transition={ToastTransitionMap[transition]}\n          {...containerProps}\n          // custom close buttons should be defined on the content level\n          closeButton={false}\n        />\n      )}\n    </ClassNames>\n  );\n};\n\n/*\n * STYLES\n */\n\nconst progressStyles = (theme: ITheme['toast']): IBoxCSS => ({\n  background: theme.progressBg,\n\n  margin: '0px 10px 5px 10px',\n  borderRadius: '9999px',\n});\n\nconst bodyStyles = (): IBoxCSS => ({\n  margin: 0,\n  width: '100%',\n  cursor: 'default',\n});\n\nconst toastStyles = (): IBoxCSS => ({\n  padding: 0,\n  borderRadius: 2,\n});\n","import { Omit } from '@stoplight/types';\nimport noop = require('lodash/noop');\nimport * as React from 'react';\n\nimport { Box, IBox, IBoxCSS } from '../Box';\nimport { Button, IButton } from '../Button';\nimport { Flex } from '../Flex';\nimport { Icon, IIcon } from '../Icon';\nimport { Text } from '../Text';\nimport { ITheme, useTheme } from '../theme';\nimport { ToastType } from './index';\n\n/**\n * TOAST CONTENT\n */\n\nexport interface IToastAction extends Omit<IButton, 'onClick'> {\n  label: string;\n  onClick?: (opts: { closeToast: () => void }) => void;\n}\n\ninterface IToastContentProps extends IToastContent, IBox<HTMLElement> {}\n\nexport interface IToastContent<T = {}> {\n  title?: string;\n  message?: string;\n  icon?: IIcon['IconProp'] | false;\n  closeIcon?: IIcon['IconProp'] | false;\n  type?: ToastType;\n  actions?: IToastAction[];\n\n  closeToast?: () => void;\n}\n\nconst ToastContent = React.forwardRef<HTMLElement, IToastContentProps>(function ToastContent(props, ref) {\n  const { title, message, type = 'default', icon, closeIcon, actions = [], closeToast = noop, css, ...rest } = props;\n  const { toast: theme } = useTheme();\n\n  const showCloseIcon = closeIcon !== false;\n\n  const toastActions = actions.map((action, index) => {\n    const { label, onClick = noop, css: buttonCss = {}, ...buttonProps } = action;\n    return (\n      <Button\n        key={index}\n        m=\"5px\"\n        color={theme.actionFg}\n        backgroundColor={theme.actionBg}\n        border=\"transparent\"\n        css={Object.assign(\n          {},\n          { ':hover': { backgroundColor: 'inherit', ':active': { border: 'inherit' } } },\n          buttonCss\n        )}\n        onClick={() => {\n          onClick({ closeToast });\n        }}\n        {...buttonProps}\n      >\n        {label}\n      </Button>\n    );\n  });\n\n  return (\n    <Flex\n      justifyContent=\"center\"\n      flexDirection=\"column\"\n      {...rest}\n      ref={ref}\n      css={[toastContentStyles(props, theme), css]}\n    >\n      {showCloseIcon && (\n        <Icon\n          icon={closeIcon || 'times'}\n          onClick={closeToast}\n          position=\"absolute\"\n          cursor=\"pointer\"\n          right={10}\n          top={10}\n        />\n      )}\n\n      <Flex alignItems=\"center\">\n        {icon && <Icon mr=\"5px\" icon={icon} color={theme.toastFg} />}\n\n        <Box>\n          {title && (\n            <Text letterSpacing=\"0.5px\" fontWeight={600}>\n              {title}\n            </Text>\n          )}\n\n          {message && (\n            <Text maxHeight=\"120px\" overflow=\"auto\">\n              {message}\n            </Text>\n          )}\n\n          {toastActions.length ? (\n            <Flex mt=\"10px\" flexWrap=\"wrap\" alignItems=\"center\" justifyContent=\"center\">\n              {toastActions}\n            </Flex>\n          ) : null}\n        </Box>\n      </Flex>\n    </Flex>\n  );\n});\n\nToastContent.displayName = 'ToastContent';\n\n/**\n * STYLE\n */\nexport const toastContentStyles = (props: IToastContentProps, theme: ITheme['toast']): IBoxCSS => {\n  const type: IToastContent['type'] = props.type;\n\n  return [\n    {\n      background: theme.toastBg,\n      color: theme.toastFg,\n      borderLeft: type && `4px solid ${theme[type]}`,\n      boxSizing: 'border-box',\n      fontSize: '15px',\n      padding: '15px',\n      height: '100%',\n    },\n  ];\n};\n\nexport { ToastContent };\n","import { Omit } from '@stoplight/types';\nimport isNil = require('lodash/isNil');\nimport pickBy = require('lodash/pickBy');\nimport * as React from 'react';\nimport {\n  Bounce as ReactTransitionBounce,\n  Flip as ReactTransitionFlip,\n  Slide as ReactTransitionSlide,\n  toast as ReactToast,\n  ToastOptions,\n  TypeOptions as ToastType,\n  Zoom as ReactTransitionZoom,\n} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { IToastContent, ToastContent } from './ToastContent';\n\n/**\n * TOAST\n */\nexport interface IToast extends IToastContent, Omit<ToastOptions, 'transition'> {\n  transition?: IToastTransition;\n}\n\nexport function Toast(options: IToast) {\n  const {\n    actions = [],\n    type = 'default',\n    transition,\n    onOpen,\n    onClose,\n    toastId,\n    progress,\n    pauseOnHover,\n    pauseOnFocusLoss,\n    closeOnClick,\n    autoClose,\n    position,\n    progressClassName,\n    progressStyle,\n    className,\n    bodyClassName,\n    hideProgressBar,\n    draggable,\n    draggablePercent,\n    ...contentProps\n  } = options;\n\n  return ReactToast(\n    <ToastContent type={type} actions={actions} {...contentProps} />,\n    pickBy(\n      {\n        onOpen,\n        onClose,\n        toastId,\n        progress,\n        pauseOnHover,\n        pauseOnFocusLoss,\n        closeOnClick,\n        position,\n        progressClassName,\n        progressStyle,\n        className,\n        bodyClassName,\n        hideProgressBar,\n        draggable,\n        draggablePercent,\n        autoClose: options.hasOwnProperty('autoClose') ? autoClose : actions.length ? false : undefined,\n        transition: transition && ToastTransitionMap[transition],\n      },\n      val => !isNil(val)\n    )\n  );\n}\n\n/**\n * TRANSITIONS\n */\nexport type IToastTransition = 'bounce' | 'flip' | 'slide' | 'zoom';\nexport const ToastTransitionMap = {\n  bounce: ReactTransitionBounce,\n  flip: ReactTransitionFlip,\n  slide: ReactTransitionSlide,\n  zoom: ReactTransitionZoom,\n};\n\n/**\n * MISC\n */\nexport * from './ToastContent';\nexport * from './ToastContainer';\nexport { ToastType };\n","import { Omit } from '@stoplight/types';\nimport * as React from 'react';\n\nimport { Box, Flex, IBox, IBoxCSS, ITheme, useTheme } from './';\n\nexport interface IToggle extends Omit<IBox<HTMLLabelElement>, 'as|onChange'> {\n  checked?: boolean;\n  onChange?: (checked: boolean) => void;\n}\n\nconst Toggle: React.FunctionComponent<IToggle> = React.forwardRef<HTMLLabelElement, IToggle>(function Toggle(\n  props,\n  ref\n) {\n  const { disabled: isDisabled, onChange, css, ...rest } = props;\n\n  const { toggle: theme } = useTheme();\n\n  const [checked, setValue] = React.useState<boolean>(!!props.checked);\n  const isChecked = props.hasOwnProperty('checked') ? !!props.checked : checked;\n\n  const handleChange = React.useCallback<React.ChangeEventHandler<HTMLInputElement>>(({ target }) => {\n    setValue(target.checked);\n    if (onChange) onChange(target.checked);\n  }, []);\n\n  return (\n    <Flex {...rest} as=\"label\" ref={ref} css={[toggleStyles(theme, { isDisabled, isChecked }), css]}>\n      <Box\n        as=\"input\"\n        type=\"checkbox\"\n        checked={checked}\n        onChange={handleChange}\n        position=\"absolute\"\n        css={{ clip: 'rect(1px, 1px, 1px, 1px)' }}\n      />\n      <Box as=\"span\" css={circleStyles(theme, { isChecked })} />\n    </Flex>\n  );\n});\n\nToggle.displayName = 'Toggle';\n\ninterface IToggleStyles {\n  isChecked?: boolean;\n  isDisabled?: boolean;\n}\n\nconst toggleStyles = (theme: ITheme['toggle'], { isDisabled, isChecked }: IToggleStyles): IBoxCSS => {\n  return [\n    {\n      backgroundColor: theme.bg,\n      border: theme.border ? `1px solid ${theme.border}` : 'none',\n\n      height: '16px',\n      width: '32px',\n      padding: 0,\n      margin: 0,\n      borderRadius: '100px',\n\n      fontSize: '14px',\n      cursor: 'pointer',\n      display: 'inline-flex',\n      alignItems: 'center',\n\n      transition: 'background-color .15s ease-in-out',\n    },\n    isChecked && {\n      backgroundColor: theme.checked,\n    },\n    isDisabled && {\n      cursor: 'not-allowed',\n      opacity: 0.6,\n    },\n  ];\n};\n\nconst circleStyles = (theme: ITheme['toggle'], { isChecked }: IToggleStyles) => {\n  return [\n    {\n      backgroundColor: theme.fg,\n\n      width: '10px',\n      height: '10px',\n      borderRadius: '50%',\n      marginLeft: '4px',\n\n      display: 'inline-block',\n      transition: 'margin-left .15s ease-in-out',\n    },\n    isChecked && {\n      // toggle width - circle width - original margin left\n      marginLeft: '18px',\n    },\n  ];\n};\n\nexport { Toggle };\n","import * as React from 'react';\n\nconst capitalize = require('lodash/capitalize');\n\nimport { Box, IBox, IBoxCSS } from './Box';\nimport { Flex } from './Flex';\nimport { ITheme, useTheme } from './theme';\nimport { Variant } from './types';\nimport { getVariant } from './utils/getVariant';\n\nexport interface ITooltip extends IBox<HTMLDivElement> {\n  variant?: Variant;\n  posX?: 'left' | 'center' | 'right';\n  posY?: 'top' | 'center' | 'bottom';\n}\n\nconst Tooltip: React.FunctionComponent<ITooltip> = React.forwardRef<HTMLDivElement, ITooltip>(function Tooltip(\n  props,\n  ref\n) {\n  const { children, posX, posY, variant, css, ...rest } = props;\n\n  const { tooltip: theme } = useTheme();\n\n  return (\n    <Box {...rest} css={tooltipStyles(theme, props)} ref={ref}>\n      <Caret {...props} />\n      <Flex position=\"relative\">\n        <Box css={contentStyles(theme, props)}>{children}</Box>\n      </Flex>\n    </Box>\n  );\n});\n\nTooltip.displayName = 'Tooltip';\n\n// This is exported mostly to make testing easier :-)\nconst Caret: React.FunctionComponent<ITooltip> = React.forwardRef<HTMLDivElement, ITooltip>(function Caret(props, ref) {\n  const { tooltip: theme } = useTheme();\n  return <Box position=\"absolute\" style={caretStyles(theme, props)} ref={ref} />;\n});\n\nCaret.displayName = 'Caret';\n\nconst tooltipStyles = (\n  baseTheme: ITheme['tooltip'],\n  { variant, posX = 'left', posY = 'top', css }: ITooltip\n): IBoxCSS => {\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  const margin: React.CSSProperties = {};\n  if (posY !== 'center') {\n    margin[opposingMargin(posY)] = `${caretHeight}px`;\n  } else if (posY === 'center' && posX !== 'center') {\n    margin[opposingMargin(posX)] = `${caretHeight}px`;\n  }\n\n  return [\n    {\n      color: theme.fg,\n      backgroundColor: theme.bg,\n      border: `1px solid ${theme.border || theme.fg}`,\n      position: 'relative',\n      borderRadius: 2,\n      margin: 0,\n      display: 'inline-block',\n      maxWidth: 400,\n      ...margin,\n    },\n    css,\n  ];\n};\n\nconst contentStyles = (baseTheme: ITheme['tooltip'], { variant }: ITooltip): IBoxCSS => {\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  return [\n    {\n      backgroundColor: theme.bg,\n      margin: `2px 5px`,\n      padding: 8,\n    },\n  ];\n};\n\nconst caretStyles = (\n  baseTheme: ITheme['tooltip'],\n  { variant, posX = 'left', posY = 'top' }: ITooltip\n): React.CSSProperties => {\n  const theme = { ...baseTheme, ...getVariant(baseTheme, variant) };\n\n  const s: React.CSSProperties = {};\n  s.width = `${sz}px`;\n  s.height = `${sz}px`;\n  s.border = `${b}px solid ${theme.border}`;\n  s.backgroundColor = theme.bg;\n\n  if (posY === 'bottom') {\n    if (posX === 'right') {\n      caretCorner(s, 'top', 'left');\n      rotate(s, 'top', 'right');\n      move(s, 'top', 'right');\n    } else if (posX === 'center') {\n      caretCorner(s, 'top', 'left');\n      rotate(s, 'center', 'center');\n      move(s, 'top', 'center');\n    } else if (posX === 'left') {\n      caretCorner(s, 'top', 'right');\n      rotate(s, 'top', 'left');\n      move(s, 'top', 'left');\n    }\n  } else if (posY === 'top') {\n    if (posX === 'right') {\n      caretCorner(s, 'bottom', 'left');\n      rotate(s, 'bottom', 'right');\n      move(s, 'bottom', 'right');\n    } else if (posX === 'center') {\n      caretCorner(s, 'bottom', 'right');\n      rotate(s, 'center', 'center');\n      move(s, 'bottom', 'center');\n    } else if (posX === 'left') {\n      caretCorner(s, 'bottom', 'right');\n      rotate(s, 'bottom', 'left');\n      move(s, 'bottom', 'left');\n    }\n  } else if (posY === 'center') {\n    if (posX === 'right') {\n      caretCorner(s, 'top', 'left');\n      rotate(s, 'top', 'left');\n      move(s, 'center', 'left');\n    } else if (posX === 'center') {\n      s.visibility = 'hidden';\n    } else if (posX === 'left') {\n      caretCorner(s, 'top', 'right');\n      rotate(s, 'top', 'right');\n      move(s, 'center', 'right');\n    }\n  }\n  return s;\n};\n\n// CONSTANTS\nconst b = 1; // border width\nconst sz = 12; // length of caret's side\nconst caretHeight = (sz * Math.SQRT2) / 2;\n\n// HELPERS\ntype Side = 'center' | 'left' | 'right' | 'top' | 'bottom';\n\nconst oppositeSide = (side: Side): Side => {\n  switch (side) {\n    case 'center':\n      return 'center';\n    case 'left':\n      return 'right';\n    case 'right':\n      return 'left';\n    case 'top':\n      return 'bottom';\n    case 'bottom':\n      return 'top';\n  }\n};\n\nconst opposingMargin = (side: Side) => 'margin' + capitalize(oppositeSide(side));\n\nconst opposingBorderWidth = (side: Side) => 'border' + capitalize(oppositeSide(side)) + 'Width';\n\nconst rotate = (\n  styles: React.CSSProperties,\n  side1: 'top' | 'bottom' | 'center',\n  side2: 'right' | 'left' | 'center'\n) => {\n  if (side1 !== 'center' && side2 !== 'center') {\n    styles.transformOrigin = `${side1} ${side2}`;\n    const signs = [[-1, 1], [1, -1]];\n    const sign = signs[side1 === 'top' ? 0 : 1][side2 === 'left' ? 0 : 1];\n    const deg = 45 * sign;\n    styles.transform = `rotate(${deg}deg)`;\n  } else {\n    styles.transform = 'rotate(45deg)';\n  }\n};\n\nconst move = (styles: React.CSSProperties, side1: 'top' | 'bottom' | 'center', side2: 'right' | 'left' | 'center') => {\n  if (side1 !== 'center') {\n    if (side2 !== 'center') {\n      styles[side1] = `-${b}px`;\n      styles[side2] = `${sz}px`;\n    } else {\n      styles[side1] = `-${b + sz / 2}px`;\n      styles.left = `calc(50% - ${caretHeight}px)`;\n    }\n  } else {\n    styles.top = '50%';\n    styles[side2] = `-${b + caretHeight}px`;\n  }\n};\n\n// This helper removes the border from two sides of the caret depending on which\n// corner is the caret's tip.\nconst caretCorner = (styles: React.CSSProperties, side1: Side, side2: Side) => {\n  styles[opposingBorderWidth(side1)] = 0;\n  styles[opposingBorderWidth(side2)] = 0;\n};\n\nexport { Tooltip, Caret };\n","import { State, Store } from '@sambego/storybook-state';\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport * as React from 'react';\n\nimport { Editor, IEditor } from '../../Code/Editor';\n\nconst store = new Store({\n  value: 'stoplight.uiKit();',\n});\n\nexport const codeEditorKnobs = (tabName = 'Code Editor'): IEditor => ({\n  language: text('language', 'javascript', tabName),\n  value: text('value', 'const defaultValue = stoplight.io();', tabName),\n  onChange: action('onChange'),\n});\n\nstoriesOf('Code|Editor', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Editor {...codeEditorKnobs()} onChange={action('onChange')} />)\n  .add('with store', () => (\n    <State store={store}>\n      <Editor {...codeEditorKnobs()} value={store.get('value')} onChange={(value: string) => store.set({ value })} />\n    </State>\n  ))\n  .add('with store autofocus', () => (\n    <State store={store}>\n      <Editor\n        {...codeEditorKnobs()}\n        value={store.get('value')}\n        onChange={(value: string) => store.set({ value })}\n        autoFocus\n      />\n    </State>\n  ));\n","import { boolean, withKnobs } from '@storybook/addon-knobs';\nimport { text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport * as React from 'react';\n\nimport { Box } from '../../Box';\nimport { IViewer, Viewer } from '../../Code/Viewer';\n\nexport const codeViewerKnobs = (tabName = 'Code Viewer'): IViewer => ({\n  language: text('language', 'javascript', tabName),\n  value: text('value', 'const defaultValue = stoplight.io();', tabName),\n  inline: boolean('inline', false, tabName),\n  showLineNumbers: boolean('showLineNumbers', false, tabName),\n});\n\nstoriesOf('Code|Viewer', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Box maxWidth=\"500px\">\n      <Viewer {...codeViewerKnobs()} />\n    </Box>\n  ))\n  .add('inline', () => (\n    <Box maxWidth=\"500px\">\n      <Viewer {...codeViewerKnobs()} inline />\n    </Box>\n  ));\n","import './Editor';\nimport './Viewer';\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { select } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { IList, List } from '../../List';\nimport { ListStylePosition, ListStyleType } from '../_utils';\nimport { cleanKnobs } from '../_utils';\n\nexport const listKnobs = (tabName = 'List'): Partial<IList> => {\n  return cleanKnobs({\n    listStyle: select('listStyle', ListStyleType, '', tabName),\n    listStylePosition: select<any>('listStylePosition', ListStylePosition, 'initial', tabName),\n  });\n};\n\nstoriesOf('List & Tables|List', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <List {...listKnobs()}>\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n      <li>Item 4</li>\n    </List>\n  ));\n","import * as React from 'react';\n\nimport { Omit } from '@stoplight/types';\nimport { number, select, text, withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\n\nimport { areEqual, Box, Flex } from '../..';\nimport { FixedSizeList, IFixedSizeListProps, IVariableSizeListProps, VariableSizeList } from '../../ScrollList';\n\nexport const variableSizeListKnobs = (tabName = 'VariableSizeList'): Omit<IVariableSizeListProps, 'children'> => ({\n  itemSize: () => 0,\n  direction: select('direction', ['vertical', 'horizontal'], 'vertical', tabName),\n  height: text('height', '500px', tabName),\n  width: text('width', '100%', tabName),\n  itemCount: number('itemCount', 20, { min: 0, max: Infinity, range: false, step: 1 }, tabName),\n});\n\nexport const fixedSizeListKnobs = (tabName = 'FixedSizeList'): Omit<IFixedSizeListProps, 'children'> => ({\n  ...variableSizeListKnobs(tabName),\n  itemSize: number('itemSize', 50, { min: 0, max: Infinity, range: false, step: 1 }, tabName),\n});\n\nconst Row: React.FunctionComponent<any> = ({ index, style, key }) => (\n  <Flex key={key} style={style} alignItems=\"center\" borderBottom=\"1px solid\" borderColor=\"currentColor\">\n    Item {index}\n  </Flex>\n);\n\nconst MemoizedRow = React.memo(props => <Row {...props} />, areEqual);\n\nstoriesOf('List & Tables|FixedSizeList', module)\n  .addDecorator(withKnobs)\n  .addDecorator(storyFn => (\n    <Box css={{ outline: '2px solid currentColor' }} width=\"500px\">\n      {storyFn()}\n    </Box>\n  ))\n  .add('with defaults', () => <FixedSizeList {...fixedSizeListKnobs()}>{Row}</FixedSizeList>)\n  .add('memoized', () => <FixedSizeList {...fixedSizeListKnobs()}>{MemoizedRow}</FixedSizeList>);\n\nstoriesOf('List & Tables|VariableSizeList', module)\n  .addDecorator(withKnobs)\n  .addDecorator(storyFn => (\n    <Box css={{ outline: '2px solid currentColor' }} width=\"500px\">\n      {storyFn()}\n    </Box>\n  ))\n  .add('with defaults', () => (\n    <VariableSizeList {...variableSizeListKnobs()} itemSize={index => Math.max(20, index * 10)}>\n      {Row}\n    </VariableSizeList>\n  ))\n  .add('memoized', () => (\n    <VariableSizeList {...variableSizeListKnobs()} itemSize={index => Math.max(20, index * 10)}>\n      {MemoizedRow}\n    </VariableSizeList>\n  ));\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\n\nimport { Table, TableCell, TableRow } from '../../Table';\n\nstoriesOf('List & Tables|Table', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Table>\n      <TableRow>\n        <TableCell as=\"th\">Site</TableCell>\n        <TableCell as=\"th\">Views</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>stoplight.io</TableCell>\n        <TableCell>27341</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>example.com</TableCell>\n        <TableCell>2351</TableCell>\n      </TableRow>\n    </Table>\n  ))\n  .add('with minWidth', () => (\n    <Table>\n      <TableRow>\n        <TableCell minWidth=\"300px\" as=\"th\">\n          Site\n        </TableCell>\n        <TableCell as=\"th\">Views</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>stoplight.io</TableCell>\n        <TableCell>27341</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>example.com</TableCell>\n        <TableCell>2351</TableCell>\n      </TableRow>\n    </Table>\n  ))\n  .add('with selection', () => (\n    <Table>\n      <TableRow>\n        <TableCell as=\"th\">Site</TableCell>\n        <TableCell as=\"th\">Views</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell isSelected>stoplight.io</TableCell>\n        <TableCell>27341</TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>example.com</TableCell>\n        <TableCell>2351</TableCell>\n      </TableRow>\n    </Table>\n  ));\n","import './List';\nimport './ScrollList';\nimport './Table';\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Button, IButton } from '../../Button';\nimport { boxKnobs } from '../Layout/Box';\n\nimport { cleanKnobs } from '../_utils';\n\nexport const buttonKnobs = (tabName = 'Button'): Partial<IButton> => {\n  return cleanKnobs<IButton>({\n    ...boxKnobs<HTMLButtonElement>(),\n    disabled: boolean('disabled', false, tabName),\n  });\n};\n\nstoriesOf('Forms|Button', module)\n  .addDecorator(withKnobs)\n\n  .add('with defaults', () => {\n    return <Button {...buttonKnobs()}>Button Text</Button>;\n  })\n  .add('disabled', () => (\n    <Button {...buttonKnobs()} disabled>\n      Button Text\n    </Button>\n  ));\n","import * as React from 'react';\n\nimport { State, Store } from '@sambego/storybook-state';\nimport { select, withKnobs } from '@storybook/addon-knobs';\nimport { boolean } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Checkbox, ICheckbox } from '../../Checkbox';\nimport { Variant } from '../../types';\nimport { cleanKnobs } from '../_utils';\n\nconst store = new Store<Partial<ICheckbox>>({\n  checked: false,\n});\n\nexport const checkboxKnobs = (tabName = 'Checkbox'): Partial<ICheckbox> => {\n  return cleanKnobs({\n    disabled: boolean('disabled', false, tabName),\n    checked: boolean('checked', false, tabName),\n    variant: select('variant', Object.values(Variant), Variant.Default, tabName),\n  });\n};\n\nstoriesOf('Forms|Checkbox', module)\n  .addDecorator(withKnobs)\n  .add('uncontrolled', () => (\n    <div>\n      <Checkbox id=\"1\" {...checkboxKnobs()} /> Text\n    </div>\n  ))\n  .add('checked', () => <Checkbox id=\"2\" {...checkboxKnobs()} checked={true} />)\n  .add('controlled', () => (\n    <State store={store}>\n      <Checkbox\n        id=\"3\"\n        {...checkboxKnobs()}\n        checked={store.get('checked')}\n        onChange={(checked: boolean) => {\n          store.set({ checked });\n        }}\n      />\n    </State>\n  ));\n","import * as React from 'react';\n\nimport { State, Store } from '@sambego/storybook-state';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean, select, text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport omit = require('lodash/omit');\n\nimport { forwardRef } from 'react';\nimport { useAutoFocus } from '../../hooks/useAutoFocus';\nimport { IInput, Input } from '../../Input';\nimport { Variant } from '../../types';\nimport { AutosizeInputType, cleanKnobs, InlineInputType } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nconst store = new Store({\n  value: 'Input Text',\n});\n\nconst CustomInput = forwardRef<HTMLInputElement, IInput>(function CustomInput({ autoFocus, ...props }, ref) {\n  const [nodeRef] = useAutoFocus<HTMLInputElement>(autoFocus, ref);\n\n  return <Input {...props} ref={nodeRef} />;\n});\n\nexport const inputKnobs = (tabName = 'Input'): IInput => {\n  return cleanKnobs({\n    ...omit(boxKnobs(), 'opacity'),\n    disabled: boolean('disabled', false, tabName),\n    type: select('type', InlineInputType, 'text', tabName),\n    placeholder: text('placeholder', 'placeholder', tabName),\n    variant: select('variant', Object.values(Variant), Variant.Default, tabName),\n  });\n};\n\nexport const autosizeInputKnobs = (tabName = 'Input'): IInput => {\n  return cleanKnobs({\n    ...inputKnobs(),\n    type: select('type', AutosizeInputType, 'text', tabName),\n  });\n};\n\nstoriesOf('Forms|Input', module)\n  .addDecorator(withKnobs)\n  .add('uncontrolled', () => <Input {...inputKnobs()} />)\n  .add('uncontrolled autofocus', () => <Input {...inputKnobs()} autoFocus />)\n  .add('autosize', () => <Input {...autosizeInputKnobs()} autosize />)\n  .add('autosize autofocus', () => <Input {...autosizeInputKnobs()} autosize autoFocus />)\n  .add('with controlled autofocus', () => (\n    <CustomInput {...inputKnobs()} autoFocus={boolean('autoFocus', true, 'Input')} />\n  ))\n  .add('controlled set', () => <Input {...inputKnobs()} value=\"not editable\" />)\n  .add('controlled store', () => (\n    <State store={store}>\n      <Input\n        {...inputKnobs()}\n        value={store.get('value')}\n        onChange={(event: React.SyntheticEvent<HTMLInputElement>) => store.set({ value: event.currentTarget.value })}\n      />\n    </State>\n  ));\n","import * as React from 'react';\n\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { array, boolean, number, select, text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Box } from '../../Box';\nimport { ISelect, Select } from '../../Select';\nimport { Variant } from '../../types';\nimport { cleanKnobs } from '../_utils';\n\nexport const selectKnobs = (tabName = 'Select'): ISelect => {\n  return cleanKnobs({\n    options: [],\n    multi: boolean('multi', false),\n    loading: boolean('loading', false),\n    disabled: boolean('disabled', false),\n    clearable: boolean('clearable', true),\n    searchable: boolean('searchable', true),\n    placeholder: text('placeholder', 'choose...'),\n    loadingMessage: text('loadingMessage', 'loadingMessage'),\n    noOptionsMessage: text('noOptionsMessage', 'no results'),\n    minMenuHeight: number('minMenuHeight', 140),\n    maxMenuHeight: number('maxMenuHeight', 300),\n    menuPlacement: select('menuPlacement', ['auto', 'bottom', 'top'], 'auto'),\n    menuIsOpen: boolean('menuIsOpen', false),\n    blurOnSelect: boolean('blurOnSelect', true),\n    closeOnSelect: boolean('closeOnSelect', true),\n    closeOnScroll: boolean('closeOnScroll', false),\n    hideSelectedOptions: boolean('hideSelectedOptions', false),\n    backspaceRemovesValue: boolean('backspaceRemovesValue', true),\n    onChange: action('onChange'),\n    variant: select('variant', Object.values(Variant), Variant.Default),\n  });\n};\n\nstoriesOf('Forms|Select', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Box width=\"40%\">\n      <Select\n        {...selectKnobs()}\n        options={[\n          { label: 'option1', value: 1 },\n          { label: 'option2', value: 2 },\n          { label: 'option3', value: 3 },\n          { label: 'option4', value: 4 },\n          { label: 'option5', value: 5 },\n        ]}\n      />\n    </Box>\n  ))\n  .add('with defaults autofocus', () => (\n    <Box width=\"40%\">\n      <Select\n        {...selectKnobs()}\n        autoFocus\n        options={[\n          { label: 'option1', value: 1 },\n          { label: 'option2', value: 2 },\n          { label: 'option3', value: 3 },\n          { label: 'option4', value: 4 },\n          { label: 'option5', value: 5 },\n        ]}\n      />\n    </Box>\n  ))\n  .add('No Options', () => (\n    <Box width=\"40%\">\n      <Select {...selectKnobs()} options={[]} />\n    </Box>\n  ))\n  .add('async', () => (\n    <Box width=\"40%\">\n      <Select\n        {...selectKnobs()}\n        defaultOptions={[{ label: 'option1', value: 2 }]}\n        loadOptions={inputValue => {\n          return new Promise(resolve => {\n            setTimeout(\n              resolve,\n              500,\n              [0, 1, 2, 3].map(index => ({\n                label: `${inputValue}${index}`,\n                value: index,\n              }))\n            );\n          });\n        }}\n      />\n    </Box>\n  ))\n  .add('creatable multi', () => (\n    <Box width=\"40%\">\n      <Select\n        {...selectKnobs()}\n        isMulti={true}\n        allowCreate={true}\n        defaultOptions={[{ label: 'option1', value: 2 }]}\n        options={array('options', ['1', '2', '3', '4']).map(x => ({ value: x, label: x }))}\n      />\n    </Box>\n  ))\n  .add('creatable async', () => (\n    <Box width=\"40%\">\n      <Select\n        {...selectKnobs()}\n        allowCreate={true}\n        defaultOptions={[{ label: 'option1', value: 2 }]}\n        loadOptions={inputValue => {\n          return new Promise(resolve => {\n            setTimeout(\n              () =>\n                resolve(\n                  [0, 1, 2, 3].map(index => ({\n                    label: `${inputValue}${index}`,\n                    value: `${index}`,\n                  }))\n                ),\n              250\n            );\n          });\n        }}\n      />\n    </Box>\n  ));\n","import * as React from 'react';\n\nimport { State, Store } from '@sambego/storybook-state';\nimport { select, withKnobs } from '@storybook/addon-knobs';\nimport { boolean, number } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { ITextarea, Textarea } from '../../Textarea';\nimport { Variant } from '../../types';\nimport { cleanKnobs } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nconst store = new Store({\n  value: 'TextArea Text',\n});\n\nexport const textareaKnobs = (tabName = 'Textarea'): ITextarea => {\n  return cleanKnobs({\n    ...boxKnobs<HTMLTextAreaElement>(),\n    autosize: boolean('autosize', false, tabName),\n    disabled: boolean('disabled', false, tabName),\n    variant: select('variant', Object.values(Variant), Variant.Default, tabName),\n  });\n};\n\nexport const textareaAutosizeKnobs = (tabName = 'Textarea'): ITextarea => {\n  return cleanKnobs({\n    ...textareaKnobs(tabName),\n    minRows: number(\n      'minRows',\n      0,\n      {\n        min: 0,\n        range: false,\n        max: Infinity,\n        step: 1,\n      },\n      tabName\n    ),\n    maxRows: number(\n      'maxRows',\n      10,\n      {\n        min: 1,\n        range: false,\n        max: Infinity,\n        step: 1,\n      },\n      tabName\n    ),\n  });\n};\n\nstoriesOf('Forms|Textarea', module)\n  .addDecorator(withKnobs)\n  .add('uncontrolled', () => <Textarea {...textareaKnobs()} autoFocus />)\n  .add('uncontrolled autofocus', () => <Textarea {...textareaKnobs()} autoFocus />)\n  .add('autosize', () => <Textarea {...textareaAutosizeKnobs()} autosize />)\n  .add('autosize autofocus', () => <Textarea {...textareaAutosizeKnobs()} autosize autoFocus />)\n  .add('controlled set', () => <Textarea {...textareaKnobs()} value=\"not-editable\" />)\n  .add('controlled store', () => (\n    <State store={store}>\n      <Textarea\n        {...textareaKnobs()}\n        value={store.get('value')}\n        onChange={(event: React.SyntheticEvent<HTMLTextAreaElement>) => store.set({ value: event.currentTarget.value })}\n      />\n    </State>\n  ));\n","import * as React from 'react';\n\nimport { State, Store } from '@sambego/storybook-state';\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { IToggle, Toggle } from '../../Toggle';\nimport { cleanKnobs } from '../_utils';\n\nconst store = new Store({\n  checked: false,\n});\n\nexport const toggleKnobs = (tabName = 'Toggle'): IToggle => {\n  return cleanKnobs({\n    disabled: boolean('disabled', false, tabName),\n    checked: boolean('checked', false, tabName),\n  });\n};\n\nexport const toggleActions = (): IToggle => ({\n  onChange: action('onChange'),\n});\n\nstoriesOf('Forms|Toggle', module)\n  .addDecorator(withKnobs)\n  .add('uncontrolled', () => <Toggle {...toggleKnobs()} {...toggleActions} />)\n  .add('checked', () => <Toggle {...toggleKnobs()} {...toggleActions} checked={true} />)\n  .add('controlled', () => (\n    <State store={store}>\n      <Toggle\n        id=\"2\"\n        {...toggleKnobs()}\n        checked={store.get('checked')}\n        onChange={(checked?: boolean) => {\n          store.set({ checked });\n        }}\n      />\n    </State>\n  ));\n","import './Button';\nimport './Checkbox';\nimport './Input';\nimport './Select';\nimport './Textarea';\nimport './Toggle';\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { number, select, text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport { TextAlignProps } from 'styled-system';\n\nimport { Box, IBox } from '../../Box';\nimport { Display, OverFlow, PositionOpts, TextAlign } from '../_utils';\nimport { cleanKnobs } from '../_utils';\n\nexport const boxKnobs = <T extends HTMLElement = HTMLDivElement>(tabName = 'Box'): Partial<IBox<T>> => {\n  return cleanKnobs({\n    color: text('color', null, tabName),\n    backgroundColor: text('backgroundColor', null, tabName),\n    textAlign: select('textAlign', TextAlign, 'initial', tabName) as TextAlignProps['textAlign'],\n    fontSize: text('fontSize', null, tabName),\n    fontWeight: select('fontWeight', [100, 200, 300, 400, 500, 600, 700, 800, 900], 400, tabName),\n    m: text('m', null, tabName),\n    mt: text('mt', null, tabName),\n    mr: text('mr', null, tabName),\n    mb: text('mb', null, tabName),\n    ml: text('ml', null, tabName),\n    mx: text('mx', null, tabName),\n    my: text('my', null, tabName),\n    p: text('p', null, tabName),\n    pt: text('pt', null, tabName),\n    pr: text('pr', null, tabName),\n    pb: text('pb', null, tabName),\n    pl: text('pl', null, tabName),\n    px: text('px', null, tabName),\n    py: text('py', null, tabName),\n    height: text('height', null, tabName),\n    maxHeight: text('maxHeight', null, tabName),\n    minHeight: text('minHeight', null, tabName),\n    width: text('width', null, tabName),\n    maxWidth: text('maxWidth', null, tabName),\n    minWidth: text('minWidth', null, tabName),\n    border: text('border', null, tabName),\n    borderColor: text('borderColor', null, tabName),\n    borderTop: text('borderTop', null, tabName),\n    borderLeft: text('borderLeft', null, tabName),\n    borderRight: text('borderRight', null, tabName),\n    borderBottom: text('borderBottom', null, tabName),\n    borderRadius: text('borderRadius', null, tabName),\n    boxShadow: text('boxShadow', null, tabName),\n    opacity: number(\n      'opacity',\n      1,\n      {\n        min: 0,\n        max: 1,\n        step: 0.01,\n        range: false,\n      },\n      tabName\n    ),\n    display: select('display', Display, '', tabName),\n    overflow: select('overflow', OverFlow, '', tabName),\n    overflowX: select('overflowX', OverFlow, '', tabName) as IBox['overflowX'],\n    overflowY: select('overflowX', OverFlow, '', tabName) as IBox['overflowY'],\n    position: select('position', PositionOpts, '', tabName) as IBox['position'],\n    top: number('top', 0, {}, tabName),\n    bottom: number('bottom', 0, {}, tabName),\n    left: number('left', 0, {}, tabName),\n    right: number('right', 0, {}, tabName),\n    z: number('z', 0, {}, tabName),\n  });\n};\n\nstoriesOf('Layout|Box', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Box {...boxKnobs()}>Box with child.</Box>);\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { number } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Break, IBreak } from '../../Break';\nimport { boxKnobs } from './Box';\n\nexport const breakKnobs = (tabName = 'Break'): IBreak => ({\n  thickness: number('thickness', 10, { min: 0, max: Infinity, step: 1, range: false }, tabName),\n});\n\nstoriesOf('Layout|Break', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Break {...boxKnobs()} {...breakKnobs()} minWidth=\"500px\" />);\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { select } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport * as ss from 'styled-system';\n\nimport { Box, Flex, IFlex } from '../../';\nimport { AlignItems, cleanKnobs, FlexDirection, FlexWrap, JustifyContent } from '../_utils';\nimport { boxKnobs } from './Box';\n\nexport const flexKnobs = (tabName = 'Flex'): IFlex => {\n  return cleanKnobs({\n    ...boxKnobs(),\n    alignItems: select('alignItems', AlignItems, '', tabName),\n    justifyContent: select('justifyContent', JustifyContent, '', tabName),\n    flexDirection: select('flexDirection', FlexDirection, '', tabName) as ss.FlexDirectionProps['flexDirection'],\n    flexWrap: select('flexWrap', FlexWrap, '', tabName) as ss.FlexWrapProps['flexWrap'],\n  });\n};\n\nstoriesOf('Layout|Flex', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Flex {...flexKnobs()} width=\"500px\" border=\"1px solid blue\">\n      <Box flex={1} border=\"@xs\">\n        Flex 1\n      </Box>\n      <Box flex={1} border=\"@xs\">\n        Flex 1\n      </Box>\n      <Box flex={2} border=\"@xs\">\n        Flex 2\n      </Box>\n    </Flex>\n  ));\n","import './Box';\nimport './Break';\nimport './Flex';\n","import * as React from 'react';\n\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Button, Flex } from '../..';\nimport { ContextMenu } from '../../ContextMenu';\n\nexport const contextMenuKnobs = (tabName = 'ContextMenu') => {\n  return {\n    hideOnLeave: boolean('hideOnLeave', false, tabName),\n  };\n};\n\nstoriesOf('Menus|Context Menu', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Button display=\"block\" onClick={() => alert('hey')}>\n        Try to click me while the context menu is opened\n      </Button>\n      <ContextMenu\n        id=\"defaultContextMenu\"\n        renderTrigger={() => 'trigger'}\n        menuItems={[\n          { title: 'Menu Item 1' },\n          { title: 'Menu Item 2' },\n          { title: 'Menu Item 3' },\n          { divider: true },\n          { title: 'Disabled Menu Item', disabled: true },\n        ]}\n        onShow={action('onShow')}\n        onHide={action('onHide')}\n      />\n      <Button display=\"block\" onClick={() => alert('hey')}>\n        Try to click me while the context menu is opened\n      </Button>\n    </Flex>\n  ))\n  .add('block external clicks', () => (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Button display=\"block\" onClick={() => alert('hey')}>\n        Try to click me while the context menu is opened\n      </Button>\n      <ContextMenu\n        id=\"defaultContextMenu\"\n        blockExternalClicks={true}\n        renderTrigger={() => 'trigger'}\n        menuItems={[\n          { title: 'Menu Item 1' },\n          { title: 'Menu Item 2' },\n          { title: 'Menu Item 3' },\n          { divider: true },\n          { title: 'Disabled Menu Item', disabled: true },\n        ]}\n        onShow={action('onShow')}\n        onHide={action('onHide')}\n      />\n      <Button display=\"block\" onClick={() => alert('hey')}>\n        Try to click me while the context menu is opened\n      </Button>\n    </Flex>\n  ))\n  .add('with no menu items', () => <ContextMenu id=\"defaultContextMenu\" renderTrigger={() => 'trigger'} />)\n  .add('open on click', () => (\n    <ContextMenu\n      id=\"defaultContextMenu\"\n      renderTrigger={ref => {\n        return (\n          <div\n            onClick={e =>\n              ref.current ? ref.current.handleContextClick(e as React.MouseEvent<HTMLDivElement>) : undefined\n            }\n          >\n            trigger\n          </div>\n        );\n      }}\n      menuItems={[\n        { title: 'Menu Item 1' },\n        { title: 'Menu Item 2' },\n        { title: 'Menu Item 3' },\n        { divider: true },\n        { title: 'Disabled Menu Item', disabled: true },\n      ]}\n      onShow={action('onShow')}\n      onHide={action('onHide')}\n    />\n  ))\n  .add('custom items', () => (\n    <ContextMenu\n      id=\"defaultContextMenu\"\n      renderTrigger={() => 'Right Click Me!'}\n      menuItems={[\n        { title: 'Menu Item 1', color: 'success', onClick: action('onClick') },\n        { title: 'Menu Item 2', color: 'warning', shortcut: '⌘⌥K' },\n        { title: 'Menu Item 3', color: 'error' },\n        { divider: true, borderColor: 'fg' },\n        {\n          title: 'Disabled Menu Item',\n          disabled: true,\n          fontStyle: 'italic',\n        },\n      ]}\n      onShow={action('onShow')}\n      onHide={action('onHide')}\n    />\n  ))\n  .add('sub menu', () => (\n    <ContextMenu\n      id=\"defaultContextMenu\"\n      renderTrigger={() => 'Right Click Me!'}\n      menuItems={[\n        { title: 'Menu Item 1', color: 'success', onClick: action('onClick') },\n        {\n          title: 'SubMenu Item',\n          color: 'warning',\n          menuItems: [\n            { title: 'SubMenu Item 1', color: 'success', onClick: action('onClick') },\n            {\n              title: 'Nested SubMenu Item 2',\n              color: 'warning',\n              menuItems: [\n                { title: 'SubMenu Item 1', color: 'success', onClick: action('onClick') },\n                { title: 'SubMenu Item 2', color: 'warning' },\n                { title: 'SubMenu Item 3', color: 'error' },\n                { divider: true, borderColor: 'fg' },\n                {\n                  title: 'Disabled SubMenu Item',\n                  disabled: true,\n                  fontStyle: 'italic',\n                },\n              ],\n            },\n            { title: 'SubMenu Item 3', color: 'error' },\n            {\n              title: 'Nested SubMenu Item 4',\n              color: 'warning',\n              menuItems: [\n                { title: 'SubMenu Item 1', color: 'success', onClick: action('onClick') },\n                { title: 'SubMenu Item 2', color: 'warning' },\n                { title: 'SubMenu Item 3', color: 'error' },\n                { divider: true, borderColor: 'fg' },\n                {\n                  title: 'Disabled SubMenu Item',\n                  disabled: true,\n                  fontStyle: 'italic',\n                },\n              ],\n            },\n            { divider: true, borderColor: 'fg' },\n            {\n              title: 'Disabled SubMenu Item',\n              disabled: true,\n              fontStyle: 'italic',\n            },\n          ],\n        },\n        { title: 'Menu Item 3', color: 'error' },\n        { divider: true, borderColor: 'fg' },\n        {\n          title: 'Disabled Menu Item',\n          disabled: true,\n          fontStyle: 'italic',\n        },\n      ]}\n      onShow={action('onShow')}\n      onHide={action('onHide')}\n    />\n  ));\n","import * as React from 'react';\n\nimport { action } from '@storybook/addon-actions';\nimport { number, select, withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\n\nimport { Icon, Menu } from '../..';\nimport { IMenu, IMenuItem } from '../../Menu';\nimport { cleanKnobs } from '../_utils';\n\nexport const menuKnobs = (tabName = 'Menu'): Partial<IMenu> => {\n  return cleanKnobs({\n    posX: select('posX', ['left', 'center', 'right'], 'right', tabName),\n    posY: select('posY', ['top', 'bottom'], 'bottom', tabName),\n    hideDelay: number('hideDelay', 200, { min: 0, max: Infinity, range: false, step: 1 }, tabName),\n    offset: {\n      x: number('offset.x', 0, { min: 0, max: Infinity, range: false, step: 1 }, tabName),\n      y: number('offset.y', 0, { min: 0, max: Infinity, range: false, step: 1 }, tabName),\n    },\n  });\n};\n\nstoriesOf('Menus|Menu', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Menu\n      {...menuKnobs()}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span> },\n        { title: 'No onClick' },\n        { title: 'Disabled Item', disabled: true },\n      ]}\n    />\n  ))\n  .add('with icons', () => (\n    <Menu\n      {...menuKnobs()}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span>, icon: 'marker' },\n        { title: 'No onClick', icon: 'image' },\n        { title: 'Disabled Item', disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ))\n  .add('with actions', () => (\n    <Menu\n      {...menuKnobs()}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span>, icon: 'marker' },\n        { title: 'No onClick', icon: 'image' },\n        { title: 'Disabled Item', disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ))\n  .add('with icons only', () => (\n    <Menu\n      {...menuKnobs()}\n      menuItems={[\n        { onClick: action('onClick'), icon: 'marker' },\n        { icon: 'image' },\n        { disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ))\n  .add('with subtext', () => (\n    <Menu\n      {...menuKnobs()}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span>, subtitle: 'has subtitle', icon: 'marker' },\n        { title: 'No onClick', icon: 'image' },\n        { title: 'Disabled Item', disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ))\n  .add('with trigger', () => (\n    <Menu\n      {...menuKnobs()}\n      renderTrigger={() => <Icon icon=\"heading\" />}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span>, subtitle: 'has subtitle', icon: 'marker' },\n        { title: 'No onClick', icon: 'image' },\n        { title: 'Disabled Item', disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ))\n  .add('with custom renderMenu', () => (\n    <Menu\n      {...menuKnobs()}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span>, subtitle: 'has subtitle', icon: 'marker' },\n        { title: 'No onClick', icon: 'image' },\n        { title: 'Disabled Item', disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ))\n  .add('with custom renderMenuItem', () => (\n    <Menu\n      {...menuKnobs()}\n      renderMenuItem={(item: IMenuItem) => <span>{item.title}</span>}\n      menuItems={[\n        { onClick: action('onClick'), title: <span>Has onClick</span>, subtitle: 'has subtitle', icon: 'marker' },\n        { title: 'No onClick', icon: 'image' },\n        { title: 'Disabled Item', disabled: true, icon: 'times-circle' },\n      ]}\n    />\n  ));\n","import './ContextMenu';\nimport './Menu';\n","import * as React from 'react';\n\nimport { action } from '@storybook/addon-actions';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Button } from '../../Button';\nimport { Dialog, IDialog } from '../../Dialog';\nimport { Heading } from '../../Heading';\nimport { cleanKnobs } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nexport const dialogKnobs = (tabName = 'Dialog'): Partial<IDialog> => {\n  return cleanKnobs({\n    ...boxKnobs(),\n    show: boolean('show', true, tabName),\n  });\n};\n\nstoriesOf('Miscellaneous|Dialog', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Dialog {...dialogKnobs()} onClickOutside={action('onClickOutside')}>\n      <Heading py={15} px={20} textAlign=\"center\">\n        Remove file?\n      </Heading>\n      <Button width=\"50%\" display=\"inline-block\">\n        yes\n      </Button>\n      <Button width=\"50%\" display=\"inline-block\">\n        no\n      </Button>\n    </Dialog>\n  ));\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean, text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { IImage, Image } from '../../Image';\nimport { cleanKnobs } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nexport const imageKnobs = (tabName = 'Image'): IImage => {\n  return cleanKnobs({\n    ...boxKnobs(),\n    height: text('height', null, tabName),\n    hidden: boolean('hidden', false, tabName),\n    responsive: boolean('responsive', false, tabName),\n    src: text('src', 'https://placehold.it/150x50', tabName),\n    alt: text('alt', 'Placeholder', tabName),\n    title: text('title', 'Placeholder', tabName),\n    width: text('width', null, tabName),\n  });\n};\n\nstoriesOf('Miscellaneous|Image', module)\n  .addDecorator(withKnobs)\n  .addDecorator(storyFn => <div style={{ width: '300px' }}>{storyFn()}</div>)\n  .add('with defaults', () => <Image {...imageKnobs()} />)\n  .add('responsive', () => <Image {...imageKnobs()} responsive />);\n","import * as React from 'react';\n\nimport { boolean, NumberOptions, withKnobs } from '@storybook/addon-knobs';\nimport { number, select, text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Box, Button, Flex, IBox, Icon, ICustomTheme, Input, Popup, Text, ThemeZone, useTheme } from '../..';\nimport { cleanKnobs } from '../_utils';\n\nconst TAB_NAME = 'Popup';\n\nexport const popupKnobs = (tabName = TAB_NAME): any => {\n  return cleanKnobs({\n    posX: select('posX', ['left', 'center', 'right'], 'left', tabName),\n    posY: select('posY', ['top', 'center', 'bottom'], 'top', tabName),\n    offset: {\n      top: number('offset.top', 0, { min: 0 } as NumberOptions, tabName),\n      bottom: number('offset.bottom', 0, { min: 0 } as NumberOptions, tabName),\n      left: number('offset.left', 0, { min: 0 } as NumberOptions, tabName),\n      right: number('offset.right', 0, { min: 0 } as NumberOptions, tabName),\n    },\n    padding: number('padding', 0, { min: 0, max: Infinity, range: false, step: 1 }, tabName),\n    width: number('width', 0, { min: 0 } as NumberOptions, tabName),\n    hideDelay: number('hideDelay', 200, { min: 0 } as NumberOptions, tabName),\n  });\n};\n\nconst PopupContent: React.FunctionComponent<IBox> = ({ children, ...props }) => {\n  const theme = useTheme() as ICustomTheme & { canvas: any };\n\n  return (\n    <Box backgroundColor={theme.canvas.bg} color={theme.canvas.fg} {...props}>\n      {children}\n    </Box>\n  );\n};\n\nstoriesOf('Miscellaneous|Popup', module)\n  .addDecorator(withKnobs)\n  .addDecorator(storyFn => (\n    <ThemeZone name=\"app\">\n      <Box height=\"500px\" width=\"500px\">\n        {storyFn()}\n      </Box>\n    </ThemeZone>\n  ))\n  .add('with defaults', () => (\n    <Popup\n      {...popupKnobs()}\n      renderTrigger={() => <Box as=\"span\">With Defaults</Box>}\n      renderContent={() => <PopupContent>{text('content', 'here is the popup content')}</PopupContent>}\n    />\n  ))\n  .add('with icon', () => (\n    <Popup\n      {...popupKnobs()}\n      renderTrigger={() => {\n        return (\n          <Box as=\"span\">\n            Hover me <Icon icon=\"globe\" />\n          </Box>\n        );\n      }}\n      renderContent={() => <PopupContent as=\"span\">Globe</PopupContent>}\n    />\n  ))\n  .add('with controlled mode', () => (\n    <Popup\n      {...popupKnobs()}\n      show={boolean('show', false, TAB_NAME)}\n      renderTrigger={() => <Box as=\"span\">I am controlled, so hovering is no-op!</Box>}\n      renderContent={() => <PopupContent>{text('content', 'here is the popup content')}</PopupContent>}\n    />\n  ))\n  .add('inside Flexbox', () => (\n    <Flex width=\"100%\">\n      <Popup\n        {...popupKnobs()}\n        renderTrigger={() => (\n          <Flex flex=\"1\" backgroundColor=\"red\">\n            {'<Flex> flex=1'}\n          </Flex>\n        )}\n        renderContent={() => <PopupContent>{text('content', 'here is the popup content')}</PopupContent>}\n      />\n      <Popup\n        {...popupKnobs()}\n        renderTrigger={() => (\n          <Input type=\"text\" value=\"<Input> flex=2\" onChange={() => void 0} flex=\"2\" invalid={true} />\n        )}\n        renderContent={() => <PopupContent>{text('content', 'here is the popup content')}</PopupContent>}\n      />\n      <Popup\n        {...popupKnobs()}\n        renderTrigger={() => <Button backgroundColor=\"green\">{'<Button> no flex'}</Button>}\n        renderContent={() => <PopupContent>{text('content', 'here is the popup content')}</PopupContent>}\n      />\n    </Flex>\n  ))\n  .add('form validation', () => (\n    <Popup\n      {...popupKnobs()}\n      padding={3}\n      renderContent={() => (\n        <PopupContent border={`1px solid red`} borderRadius=\"10px\" p={7}>\n          This is a tooltip message.\n        </PopupContent>\n      )}\n      renderTrigger={() => (\n        <Flex width=\"100%\" alignItems=\"center\">\n          <Box flex=\"1\">\n            <Text as=\"label\">Title</Text>\n          </Box>\n          <Flex flex=\"1\" width=\"100%\">\n            <Box>\n              <Input type=\"text\" value=\"Here is some text\" onChange={() => void 0} flex=\"1\" invalid={true} />\n            </Box>\n          </Flex>\n        </Flex>\n      )}\n    />\n  ));\n","import { storiesOf } from '@storybook/react';\nimport * as React from 'react';\n\nimport { Tab, TabList, TabPanel, Tabs } from '../../Tabs';\n\nstoriesOf('Miscellaneous|Tabs', module)\n  .addDecorator(storyFn => <div style={{ width: '300px' }}>{storyFn()}</div>)\n  .add('with defaults', () => (\n    <Tabs>\n      <TabList>\n        <Tab>Title 1</Tab>\n        <Tab>Title 2</Tab>\n      </TabList>\n\n      <TabPanel>\n        <h3>Any content 1</h3>\n      </TabPanel>\n      <TabPanel>\n        <h2>Any content 2</h2>\n      </TabPanel>\n    </Tabs>\n  ))\n  .add('disabled tab', () => (\n    <Tabs>\n      <TabList>\n        <Tab>Title 1</Tab>\n        <Tab disabled={true}>Title 2</Tab>\n      </TabList>\n\n      <TabPanel>\n        <h3>Any content 1</h3>\n      </TabPanel>\n      <TabPanel>\n        <h2>Any content 2</h2>\n      </TabPanel>\n    </Tabs>\n  ));\n","import { select, text, withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\nimport * as React from 'react';\nimport { Box } from '../../Box';\nimport { Toast, ToastContainer } from '../../Toast';\nimport { cleanKnobs } from '../_utils';\n\nexport const toastKnobs = (tabName = 'Toaster'): any => {\n  return cleanKnobs({\n    type: select('type', ['info', 'error', 'success', 'warning', 'default'], 'default', tabName),\n    title: text('title', 'Title', tabName),\n    message: text('message', 'Message', tabName),\n    transition: select('transition', ['zoom', 'bounce', 'slide', 'flip'], 'zoom', tabName),\n    position: select(\n      'position',\n      ['top-left', 'top-right', 'top-center', 'bottom-left', 'bottom-right', 'bottom-center'],\n      'bottom-right',\n      tabName\n    ),\n  });\n};\n\nstoriesOf('Miscellaneous|Toast', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Box>\n      <ToastContainer position={toastKnobs().position} />\n      <button\n        onClick={() =>\n          Toast({\n            title: toastKnobs().title,\n            message: toastKnobs().message,\n            type: toastKnobs().type,\n            transition: toastKnobs().transition,\n          })\n        }\n      >\n        Toast!\n      </button>\n    </Box>\n  ))\n  .add('with actions', () => (\n    <Box>\n      <ToastContainer position={toastKnobs().position} />\n      <button\n        onClick={() =>\n          Toast({\n            title: toastKnobs().title,\n            message: toastKnobs().message,\n            type: toastKnobs().type,\n            transition: toastKnobs().transition,\n            actions: [\n              {\n                label: 'Check Dev.Console',\n                onClick: () => console.log('clicked'),\n              },\n              {\n                label: 'Close on Click',\n                onClick: ({ closeToast }) => {\n                  closeToast();\n                },\n              },\n              { label: 'Disabled Action', disabled: true },\n            ],\n          })\n        }\n      >\n        Toast!\n      </button>\n    </Box>\n  ));\n","import * as React from 'react';\n\nimport { select, withKnobs } from '@storybook/addon-knobs';\nimport { text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Button } from '../../Button';\nimport { Popup } from '../../Popup';\nimport { ITooltip, Tooltip } from '../../Tooltip';\nimport { Variant } from '../../types';\nimport { cleanKnobs } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nexport const TooltipKnobs = (tabName = 'Tooltip'): ITooltip => {\n  return cleanKnobs({\n    ...boxKnobs(),\n    variant: select('variant', Object.values(Variant), Variant.Default, tabName),\n    posX: select('posX', ['left', 'center', 'right'], 'left', tabName),\n    posY: select('posY', ['top', 'center', 'bottom'], 'top', tabName),\n  });\n};\n\nconst sometext = `Here is some tooltip text Here is some tooltip text Here is some tooltip text Here is some tooltip text Here is some tooltip text`;\n\nstoriesOf('Miscellaneous|Tooltip', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <Tooltip {...TooltipKnobs()}>\n      <div>{text('children', 'Here is some tooltip text', 'Tooltip')}</div>\n    </Tooltip>\n  ))\n  .add('inside Popups', () => (\n    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', width: '403px', margin: '100px' }}>\n      <Popup\n        posY=\"top\"\n        posX=\"left\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"left\" posY=\"top\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>top left</Button>}\n      />\n      <Popup\n        posY=\"top\"\n        posX=\"center\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"center\" posY=\"top\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>top center</Button>}\n      />\n      <Popup\n        posY=\"top\"\n        posX=\"right\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"right\" posY=\"top\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>top right</Button>}\n      />\n\n      <Popup\n        posY=\"center\"\n        posX=\"left\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"200px\" posX=\"left\" posY=\"center\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>center left</Button>}\n      />\n      <Popup\n        posY=\"center\"\n        posX=\"center\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"center\" posY=\"center\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>center center</Button>}\n      />\n      <Popup\n        posY=\"center\"\n        posX=\"right\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"200px\" posX=\"right\" posY=\"center\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>center right</Button>}\n      />\n\n      <Popup\n        posY=\"bottom\"\n        posX=\"left\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"left\" posY=\"bottom\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>bottom left</Button>}\n      />\n      <Popup\n        posY=\"bottom\"\n        posX=\"center\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"center\" posY=\"bottom\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>bottom center</Button>}\n      />\n      <Popup\n        posY=\"bottom\"\n        posX=\"right\"\n        padding={2}\n        renderContent={() => (\n          <Tooltip maxWidth=\"400px\" posX=\"right\" posY=\"bottom\">\n            {sometext}\n          </Tooltip>\n        )}\n        renderTrigger={() => <Button>bottom right</Button>}\n      />\n    </div>\n  ));\n","import './Dialog';\nimport './Image';\nimport './Popup';\nimport './Tabs';\nimport './Toast';\nimport './Tooltip';\n","import * as React from 'react';\n\nimport { boolean, text, withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\n\nimport { BlockQuote, IBlockQuote } from '../../BlockQuote';\nimport { cleanKnobs } from '../_utils';\nimport { textKnobs } from './Text';\n\nexport const blockQuoteKnobs = (tabName = 'Block Quote'): IBlockQuote => {\n  return cleanKnobs({\n    ...textKnobs(),\n    children: text('content', 'a quote', tabName),\n    isSelected: boolean('isSelected', false, tabName),\n  });\n};\n\nstoriesOf('Typography|BlockQuote', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <BlockQuote {...blockQuoteKnobs()} />)\n  .add('with shadow', () => <BlockQuote {...blockQuoteKnobs()} isSelected />);\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { select } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Heading, IHeading } from '../../Heading';\nimport { textKnobs } from './Text';\n\nexport const headingKnobs = (tabName = 'Heading'): IHeading => ({\n  ...textKnobs(),\n  as: select('as', ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'], 'h1', tabName),\n});\n\nstoriesOf('Typography|Heading', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Heading {...headingKnobs()}>Some Text in a H* tag</Heading>);\n","import * as React from 'react';\n\nimport { text, withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\n\nimport { ILink, Link } from '../../Link';\nimport { cleanKnobs } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nexport const linkKnobs = (tabName = 'Link'): ILink => {\n  return cleanKnobs({\n    ...boxKnobs(),\n    href: text('href', 'https://www.stoplight.io', tabName),\n    title: text('title', 'Stoplight.io', tabName),\n    children: text('content', 'stoplight.io', tabName),\n  });\n};\n\nstoriesOf('Typography|Link', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Link {...linkKnobs()} />);\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean, select, text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { IText, Text } from '../../Text';\nimport { Casing, Decoration, LetterSpacing, LineHeight } from '../_utils';\nimport { cleanKnobs } from '../_utils';\nimport { boxKnobs } from '../Layout/Box';\n\nexport const textKnobs = (tabName = 'Text'): IText => {\n  return cleanKnobs({\n    ...boxKnobs(),\n    tracking: select('tracking', LetterSpacing, '', tabName),\n    leading: select('leading', LineHeight, '', tabName),\n    casing: select('casing', Casing, '', tabName) as IText['textTransform'],\n    textDecoration: select('textDecoration', Decoration, '', tabName),\n    textDecorationColor: text('textDecorationColor', null, tabName),\n    italic: boolean('italic', false, tabName),\n  });\n};\n\nstoriesOf('Typography|Text', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Text {...textKnobs()}>Some Text in a P tag</Text>);\n","import './BlockQuote';\nimport './Heading';\nimport './Link';\nimport './Text';\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { select } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Badge, BadgeColor, BadgeVariant } from '../../Badge';\nimport { cleanKnobs } from '../_utils';\n\nexport const badgeKnobs = (tabName = 'Badge'): any => {\n  return cleanKnobs({\n    color: select('color', Object.values(BadgeColor), BadgeColor.Default, tabName),\n    variant: select('getVariant', Object.values(BadgeVariant), BadgeVariant.Pill, tabName),\n  });\n};\n\nstoriesOf('Utilities|Badge', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <div>\n      <Badge key=\"badge\" {...badgeKnobs()}>\n        5\n      </Badge>\n    </div>\n  ));\n","import * as React from 'react';\n\nimport * as _brandIcons from '@fortawesome/free-brands-svg-icons';\nimport * as _regularIcons from '@fortawesome/free-regular-svg-icons';\nimport * as _solidIcons from '@fortawesome/free-solid-svg-icons';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { boolean, select } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport map = require('lodash/map');\n\nimport { Icon, IconLibrary, IIcon } from '../../Icon';\nimport { cleanKnobs } from '../_utils';\n\nconst { fab, prefix: brandPrefix, ...brandIcons } = _brandIcons;\nconst { far, prefix: regularPrefix, ...regularIcons } = _regularIcons;\nconst { fas, prefix: solidPrefix, ...solidIcons } = _solidIcons;\n\nIconLibrary.add(fab, far, fas);\n\nexport const iconKnobs = (tabName = 'Icon'): any => {\n  const prefix = select('prefix', [brandPrefix, regularPrefix, solidPrefix], solidPrefix, 'Icon');\n\n  let icons: IIcon[] | ReadonlyArray<any>;\n  switch (prefix) {\n    case 'fab':\n      icons = map(brandIcons, icon => icon.iconName).filter(Boolean);\n      break;\n    case 'far':\n      icons = map(regularIcons, icon => icon.iconName).filter(Boolean);\n      break;\n    case 'fas':\n    default:\n      icons = map(solidIcons, icon => icon.iconName).filter(Boolean);\n      break;\n  }\n\n  const iconName: IIcon = select('icon', icons, icons[10], tabName);\n  const flip = select('flip', ['', 'horizontal', 'vertical', 'both'], '', tabName) || undefined;\n  const rotation = Number(select('rotation', ['0', '90', '180', '270'], '0', tabName)) || undefined;\n\n  const props = {\n    icon: [prefix, iconName],\n    flip,\n    rotation,\n    spin: boolean('spin', false, tabName),\n    pulse: boolean('pulse', false, tabName),\n  };\n\n  return cleanKnobs(props);\n};\n\nstoriesOf('Utilities|Icon', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => (\n    <div style={{ fontSize: 40 }}>\n      <Icon key=\"icon\" {...iconKnobs()} />\n    </div>\n  ));\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { select } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Box, Button, Flex } from '../../';\nimport { Viewer } from '../../Code/Viewer';\nimport { IScrollbars, ScrollBox } from '../../ScrollBox';\n\nexport const scrollBoxKnobs = (tabName = 'ScrollBox') => ({\n  scrollTo: select('scrollTo', ['', 'ul-list', 'sub-heading2', 'sub-heading3'], '', tabName),\n});\n\nstoriesOf('Utilities|ScrollBox', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <WithRef />)\n  .add('with scrollTo on load', () => (\n    <Box width=\"50%\" height=\"50%\" m=\"@auto\" border=\"@sm\">\n      <ScrollBox scrollTo=\"sub-heading2\">\n        <ScrollContent />\n      </ScrollBox>\n    </Box>\n  ))\n  .add('with Code Viwer inside', () => (\n    <Box width=\"50%\" height=\"50%\" m=\"@auto\" border=\"@sm\">\n      <ScrollBox>\n        <Viewer\n          language=\"javascript\"\n          showLineNumbers={true}\n          value={`import { boolean, withKnobs } from '@storybook/addon-knobs';\nimport { text } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\nimport * as React from 'react';\n\nimport { IViewer, Viewer } from '../../Code/Viewer';\n\nexport const codeViewerKnobs = (tabName = 'Code Viewer'): IViewer => ({\n  language: text('language', 'javascript', tabName),\n  value: text('value', 'const defaultValue = stoplight.io();', tabName),\n  inline: boolean('inline', false, tabName),\n  showLineNumbers: boolean('showLineNumbers', false, tabName),\n});\n\nstoriesOf('Code:Viewer', module)\n  .addDecorator(withKnobs)\n  .add('with defaults', () => <Viewer {...codeViewerKnobs()} />)\n  .add('inline', () => <Viewer {...codeViewerKnobs()} inline />);\n`}\n        />\n      </ScrollBox>\n    </Box>\n  ));\n\nconst WithRef = () => {\n  const ref = React.useRef<IScrollbars>(null);\n\n  return (\n    <Box width=\"500px\" height=\"50%\" m=\"@auto\" border=\"@sm\">\n      <Flex p=\"@lg\">\n        <Button\n          onClick={() => {\n            if (!ref.current) return;\n            ref.current.scrollToBottom();\n          }}\n        >\n          Scroll To Bottom\n        </Button>\n        <Button\n          onClick={() => {\n            if (!ref.current) return;\n            ref.current.scrollToTop();\n          }}\n        >\n          Scroll To Top\n        </Button>\n      </Flex>\n      <ScrollBox {...scrollBoxKnobs()} innerRef={ref}>\n        <ScrollContent />\n      </ScrollBox>\n    </Box>\n  );\n};\n\nconst ScrollContent = () => {\n  return (\n    <div>\n      <div style={{ padding: 20 }}>\n        <h1>\n          This is the primary heading and there should only be one of these per page\n          sadassadasdsdasdaslkdmaslkdmasldkmalskdmasldmasldkamsldkamsdlkasmdlkamsdlkmsadlksamdlksamdlaskdmasldkmsakdmasldkmasdkmalskdmlaskdm\n        </h1>\n        <p>\n          A small paragraph to <em>emphasis</em> and show <strong>important</strong> bits.\n        </p>\n        <a href=\"#ul-list\" id=\"ul-list\" />\n        <ul>\n          <li>This is a list item</li>\n          <li>So is this - there could be more</li>\n          <li>\n            Make sure to style list items to:\n            <ul>\n              <li>Not forgetting child list items</li>\n              <li>Not forgetting child list items</li>\n              <li>Not forgetting child list items</li>\n              <li>Not forgetting child list items</li>\n            </ul>\n          </li>\n          <li>A couple more</li>\n          <li>top level list items</li>\n        </ul>\n        <p>\n          Don't forget <strong>Ordered lists</strong>:\n        </p>\n        <ol>\n          <li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>\n          <li>\n            Aliquam tincidunt mauris eu risus.\n            <ol>\n              <li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>\n              <li>Aliquam tincidunt mauris eu risus.</li>\n            </ol>\n          </li>\n          <li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</li>\n          <li>Aliquam tincidunt mauris eu risus.</li>\n        </ol>\n        <a href=\"#sub-heading2\" id=\"sub-heading2\" />\n        <h2>A sub heading which is not as important as the first, but is quite imporant overall</h2>\n        <p>\n          Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum\n          tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas\n          semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.\n        </p>\n\n        <a href=\"#sub-heading3\" id=\"sub-heading3\" />\n        <h3>A sub heading which is not as important as the second, but should be used with consideration</h3>\n        <p>\n          Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum\n          tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas\n          semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.\n        </p>\n      </div>\n    </div>\n  );\n};\n","import './Badge';\nimport './Icon';\nimport './ScrollBox';\n","import * as React from 'react';\n\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { select, withKnobs } from '@storybook/addon-knobs';\nimport { boolean } from '@storybook/addon-knobs/react';\nimport { storiesOf } from '@storybook/react';\n\nimport { Box, Button, Checkbox, Flex, Icon, IconLibrary, Input, Textarea, Toggle } from '../../';\nimport { Select } from '../../Select';\nimport { Variant } from '../../types';\n\nIconLibrary.add(faPlus);\n\nconst knobs = () => ({\n  variant: select('variant', Object.values(Variant), Variant.Default),\n  disabled: boolean('disabled', false),\n});\n\nstoriesOf('Views|Components', module)\n  .addDecorator(withKnobs)\n  .add('Form Components', () => <App />);\n\nconst App = () => {\n  return (\n    <Flex alignItems=\"center\">\n      <Box mr=\"3\">\n        <Button {...knobs()}>Button</Button>\n      </Box>\n\n      <Box mr=\"3\">\n        <Button {...knobs()}>\n          <Icon icon=\"plus\" />\n        </Button>\n      </Box>\n\n      <Box mr=\"3\">\n        <Checkbox {...knobs()} />\n      </Box>\n\n      <Box mr=\"3\">\n        <Toggle {...knobs()} />\n      </Box>\n\n      <Box mr=\"3\">\n        <Input placeholder=\"placeholder\" {...knobs()} />\n      </Box>\n\n      <Box mr=\"3\">\n        <Textarea placeholder=\"placeholder\" {...knobs()} />\n      </Box>\n\n      <Box mr=\"3\">\n        <Select placeholder=\"select\" {...knobs()} options={['1', '2', '3', '4'].map(x => ({ value: x, label: x }))} />\n      </Box>\n\n      <Box mr=\"3\">\n        <Select\n          placeholder=\"select-multi\"\n          {...knobs()}\n          isMulti={true}\n          options={['1', '2', '3', '4'].map(x => ({ value: x, label: x }))}\n        />\n      </Box>\n    </Flex>\n  );\n};\n","import * as React from 'react';\n\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { storiesOf } from '@storybook/react';\n\nimport { Box, Button, createThemedModule, Flex, IBox, ITheme } from '../../';\n\ninterface ILayoutTheme extends ITheme {\n  container?: {\n    fg: string;\n    bg: string;\n  };\n}\n\ntype Zones = 'inner' | 'inverted';\nconst { ThemeZone, useTheme } = createThemedModule<Zones, ILayoutTheme>();\n\nstoriesOf('Views|Kitchen Sink', module)\n  .addDecorator(withKnobs)\n  .add('Flex and Box', () => <App />);\n\n/** Our fictitional App */\n\nconst App = () => {\n  const theme = useTheme();\n\n  return (\n    <Flex flexDirection=\"column\" textAlign=\"center\" p={7} pt={15} position=\"relative\" border=\"1px solid\">\n      <BoxBadge color={theme.link.fg}>Flex Column</BoxBadge>\n\n      <CustomStoryBox p={15}>[zone: none] the default root theme values, with some extra padding</CustomStoryBox>\n\n      <Flex p={7} pt={15} mt={7} position=\"relative\" backgroundColor=\"red\">\n        <BoxBadge>Flex Row</BoxBadge>\n\n        <ThemeZone name=\"inner\">\n          <CustomStoryBox flex=\"1\" p={11} pt={15} mr={7}>\n            <Box>[zone: 'inner'] defaults canvas.bg to purple and canvas.fg to white</Box>\n            <Button mt={11}>Go</Button>\n          </CustomStoryBox>\n        </ThemeZone>\n\n        <ThemeZone name=\"inverted\">\n          <CustomStoryBox flex=\"1\" p={11} pt={15}>\n            <Box>[zone: 'inverted'] inverts canvas bg and fg</Box>\n            <Button mt={11}>Go</Button>\n          </CustomStoryBox>\n        </ThemeZone>\n      </Flex>\n    </Flex>\n  );\n};\n\nconst BoxBadge: React.FunctionComponent<IBox> = props => (\n  <Box\n    fontSize={0}\n    position=\"absolute\"\n    top={0}\n    right={0}\n    px={4}\n    py=\"1px\"\n    fontStyle=\"italic\"\n    {...props}\n    borderBottom=\"1px solid\"\n    borderLeft=\"1px solid\"\n  />\n);\n\nconst CustomStoryBox: React.FunctionComponent<IBox> = ({ children, ...props }) => {\n  const theme = useTheme();\n\n  return (\n    <Box\n      backgroundColor={theme.container && theme.container.bg}\n      color={theme.container && theme.container.fg}\n      position=\"relative\"\n      {...props}\n    >\n      {children}\n      <BoxBadge>Box</BoxBadge>\n    </Box>\n  );\n};\n","const cleanDeep = require('clean-deep');\n\n/**\n * BOX\n */\nexport const TextAlign = ['left', 'right', 'center', 'justify', 'initial', 'inherit'];\nexport const OverFlow = ['visible', 'hidden', 'scroll', 'auto', 'initial', 'inherit'];\nexport const PositionOpts = ['static', 'relative', 'fixed', 'absolute', 'sticky', 'inherit', 'initial'];\n\nexport const Display = [\n  '',\n  'inline',\n  'block',\n  'contents',\n  'flex',\n  'grid',\n  'inline-block',\n  'inline-flex',\n  'inline-grid',\n  'inline-table',\n  'list-item',\n  'run-in',\n  'table',\n  'table-caption',\n  'table-column-group',\n  'table-header-group',\n  'table-footer-group',\n  'table-row-group',\n  'table-cell',\n  'table-column',\n  'table-row',\n  'none',\n  'initial',\n  'inherit',\n];\n\n/**\n * FLEX\n */\nexport const AlignItems = ['', 'stretch', 'center', 'flex-start', 'flex-end', 'baseline', 'initial', 'inherit'];\nexport const JustifyContent = [\n  '',\n  'flex-start',\n  'flex-end',\n  'center',\n  'space-between',\n  'space-around',\n  'initial',\n  'inherit',\n];\n\nexport const FlexDirection = ['row', 'row-reverse', 'column', 'column-reverse', 'initial', 'inherit'];\nexport const FlexWrap = ['nowrap', 'wrap', 'wrap-reverse', 'initial', 'inherit'];\n\n/**\n * TEXT\n */\nexport const Decoration = ['', 'none', 'underline', 'overline', 'line-through', 'initial', 'inherit'];\n\nexport const Casing = ['none', 'capitalize', 'uppercase', 'lowercase', 'initial', 'inherit'];\nexport const LineHeight = ['', 'reset', 'none', 'tight', 'normal', 'loose'];\nexport const LetterSpacing = ['', 'tight', 'normal', 'wide'];\n\n/**\n * LIST\n */\n\nexport const ListStylePosition = ['inside', 'outside', 'initial', 'inherit', 'revert'];\nexport const ListStyleType = [\n  '',\n  'circle',\n  'disc',\n  'square',\n  'armenian',\n  'cjk-ideographic',\n  'decimal',\n  'decimal-leading-zero',\n  'georgian',\n  'hebrew',\n  'hiragana',\n  'hiragana-iroha',\n  'katakana',\n  'katakana-iroha',\n  'lower-alpha',\n  'lower-greek',\n  'lower-latin',\n  'lower-roman',\n  'upper-alpha',\n  'upper-greek',\n  'upper-latin',\n  'upper-roman',\n  'none',\n  'inherit',\n];\n\n/**\n * INPUT\n */\n\nexport const InlineInputType = [\n  'text',\n  'date',\n  'datetime-local',\n  'email',\n  'number',\n  'password',\n  'search',\n  'time',\n  'url',\n];\n\nexport const AutosizeInputType = ['text', 'email', 'password', 'search', 'url'];\n\n/**\n * CLEAN KNOBS\n * use this function for better cleaning of the props, we want to strip out undefined/falsey value (except zero)\n * empty props normally get passed to the storybook component which messes with default values\n */\n\nexport function cleanKnobs<T = {}>(props: any): Partial<T> {\n  return cleanDeep(props, {\n    emptyArrays: false,\n    emptyObjects: false,\n    emptyStrings: true,\n    nullValues: true,\n    undefinedValues: true,\n  });\n}\n","import './Code/';\nimport './Data/';\nimport './Forms';\nimport './Layout';\nimport './Menus/';\nimport './Misc/';\nimport './Typography';\nimport './Utilities/';\nimport './Views/Components';\nimport './Views/Layout';\n","import { MutableRefObject, Ref, useEffect, useRef } from 'react';\n\nexport const useAutoFocus = <T extends Partial<{ focus: () => any }>>(autoFocus?: boolean, ref?: Ref<T>) => {\n  const nodeRef = useRef<T>(null);\n\n  useEffect(() => {\n    /**\n     * This is needed for ref forwarding\n     *\n     * const YourComponent = React.forwardRef<HTMLInputElement, any>((props, ref) => {\n     *   const [nodeRef] = useAutoFocus(props.autoFocus, ref);\n     *\n     *   return <input ref={nodeRef} value=\"foo\" />;\n     * });\n     *\n     * We also support a ref function (a bit older approach, pre createRef / forwardRef / useRef)\n     */\n    if (!ref) return;\n    if (typeof ref === 'function') {\n      ref(nodeRef.current);\n    } else if ('current' in ref) {\n      (ref as MutableRefObject<T | null>).current = nodeRef.current;\n    }\n  }, [nodeRef.current, ref]);\n\n  useEffect(() => {\n    const { current: node } = nodeRef;\n    if (autoFocus && node !== null && node.focus) {\n      node.focus();\n    }\n  }, [autoFocus, nodeRef.current]);\n\n  return [nodeRef];\n};\n","import { MouseEventHandler, useEffect, useState } from 'react';\nimport { IBox } from '../Box';\n\nexport const useHover = (\n  initialState: boolean,\n  props: IBox<HTMLElement>,\n  hideDelay?: number\n): [boolean, { onMouseEnter: MouseEventHandler<HTMLElement>; onMouseLeave: MouseEventHandler<HTMLElement> }] => {\n  let timer: null | NodeJS.Timer | number = null;\n  const [state, setState] = useState<boolean>(initialState);\n\n  const onMouseEnter: MouseEventHandler<HTMLElement> = e => {\n    if (props && props.onMouseEnter) {\n      props.onMouseEnter(e);\n    }\n\n    if (timer !== null) {\n      clearTimeout(timer as number);\n      timer = null;\n    }\n\n    setState(true);\n  };\n\n  const onMouseLeave: MouseEventHandler<HTMLElement> = e => {\n    if (props && props.onMouseLeave) {\n      props.onMouseLeave(e);\n    }\n\n    if (hideDelay !== undefined) {\n      timer = setTimeout(setState, hideDelay, false);\n    } else {\n      setState(false);\n    }\n  };\n\n  useEffect(\n    () => {\n      if (timer !== null) {\n        clearTimeout(timer as number);\n        timer = null;\n      }\n    },\n    [timer]\n  );\n\n  return [\n    state,\n    {\n      onMouseEnter,\n      onMouseLeave,\n    },\n  ];\n};\n","import * as React from 'react';\nimport { scrollToHash } from '../utils/scroll';\n\nexport const useScrollToHash = (elementId?: string) => {\n  const targetScrollTo = elementId || (typeof window !== 'undefined' ? window.location.hash : null);\n\n  React.useEffect(\n    () => {\n      if (targetScrollTo) {\n        scrollToHash(targetScrollTo);\n      }\n    },\n    [targetScrollTo]\n  );\n};\n","import debounce = require('lodash/debounce');\nimport * as React from 'react';\n\nexport function useWindowResize() {\n  const [timestamp, setTimestamp] = React.useState<number>(0);\n\n  if (typeof window !== 'undefined') {\n    React.useEffect(() => {\n      const resizeHandler = debounce<EventListener>((e: Event) => {\n        setTimestamp(e.timeStamp);\n      }, 16);\n\n      window.addEventListener('resize', resizeHandler);\n\n      return () => {\n        window.removeEventListener('resize', resizeHandler);\n      };\n    }, []);\n  }\n\n  return timestamp;\n}\n","/**\n * NOTE: any components with meaningful external dependencies should NOT be exported here.\n * Library users will need to `import { Select } from '@stoplight/ui-kit/select` them specifically.\n */\n\nexport * from './Badge';\nexport * from './BlockQuote';\nexport * from './Box';\nexport * from './Break';\nexport * from './Button';\nexport * from './Checkbox';\nexport * from './Dialog';\nexport * from './Flex';\nexport * from './Heading';\nexport * from './Icon';\nexport * from './Image';\nexport * from './Input';\nexport * from './Link';\nexport * from './List';\nexport * from './Menu';\nexport * from './Overlay';\nexport * from './Popup';\nexport * from './Portal';\nexport * from './ScrollList';\nexport * from './Table';\nexport * from './Tabs';\nexport * from './Text';\nexport * from './Textarea';\nexport * from './Toast';\nexport * from './Toggle';\nexport * from './Tooltip';\n\nexport * from './theme';\nexport * from './types';\n","import isNil = require('lodash/isNil');\n\nimport {\n  BackgroundColorProperty,\n  BoxSizingProperty,\n  ColorProperty,\n  CursorProperty,\n  FlexFlowProperty,\n  ListStylePositionProperty,\n  ListStyleProperty,\n  OverflowProperty,\n  OverflowXProperty,\n  OverflowYProperty,\n  TextDecorationColorProperty,\n  TextDecorationProperty,\n  TextOverflowProperty,\n  TextTransformProperty,\n  TransformProperty,\n  VisibilityProperty,\n  WhiteSpaceProperty,\n} from 'csstype';\n\nimport * as ss from 'styled-system';\n\n/**\n * BOX SIZE\n */\n\nexport interface IBoxSizingProps {\n  boxSizing?: BoxSizingProperty;\n}\n\nexport const boxSizing = (props: IBoxSizingProps) => ({\n  boxSizing: props.boxSizing,\n});\n\n/**\n * COLOR\n */\n\nexport interface IColorProps {\n  color?: ColorProperty;\n  backgroundColor?: BackgroundColorProperty;\n}\n\nexport const color = (props: IColorProps) => ({\n  color: props.color,\n  backgroundColor: props.backgroundColor,\n});\n\n/**\n * CURSOR\n */\n\nexport interface ICursorProps {\n  cursor?: CursorProperty;\n}\n\nexport const cursor = (props: ICursorProps) => ({\n  cursor: props.cursor,\n});\n\n/**\n * FLEX\n */\n\nexport interface IFlexFlowProperty {\n  flexFlow?: FlexFlowProperty;\n}\n\nexport const flexFlow = (props: IFlexFlowProperty) => ({\n  flexFlow: props.flexFlow,\n});\n\n/**\n * LIST STYLE\n */\n\nexport interface IListStyleProps {\n  listStyle?: ListStyleProperty;\n  listStylePosition?: ListStylePositionProperty;\n}\n\nexport const listStyle = (props: IListStyleProps) => ({\n  listStyle: props.listStyle,\n  listStylePosition: props.listStylePosition,\n});\n\n/**\n * OVERFLOW\n */\n\nexport interface IOverflowProps {\n  overflow?: OverflowProperty;\n  overflowX?: OverflowXProperty;\n  overflowY?: OverflowYProperty;\n}\n\nexport const overflow = (props: IOverflowProps) => ({\n  overflow: props.overflow,\n  overflowX: props.overflowX,\n  overflowY: props.overflowY,\n});\n\n/**\n * TEXT DECORATION\n */\n\nexport interface ITextDecorationProps {\n  textDecoration?: TextDecorationProperty;\n  textDecorationColor?: TextDecorationColorProperty;\n}\n\nexport const textDecoration = (props: ITextDecorationProps) => ({\n  textDecoration: props.textDecoration,\n  textDecorationColor: props.textDecorationColor,\n});\n\n/**\n * TEXT OVERFLOW\n */\n\nexport const textOverflow = (props: ITextOverflowProps) => ({\n  textOverflow: props.textOverflow,\n});\n\nexport interface ITextOverflowProps {\n  textOverflow?: TextOverflowProperty;\n}\n\n/**\n * TEXT TRANSFORM\n */\n\nexport interface ITextTransformProps {\n  textTransform?: TextTransformProperty;\n}\n\nexport const textTransform = (props: ITextTransformProps) => ({\n  textTransform: props.textTransform,\n});\n\n/**\n * TRANSFORM\n */\n\nexport interface ITransformProps {\n  transform?: TransformProperty;\n}\n\nexport const transform = (props: ITransformProps) => ({\n  transform: props.transform,\n});\n\n/**\n * VISIBILITY\n */\n\nexport interface IVisibilityProps {\n  visibility?: VisibilityProperty;\n}\n\nexport const visibility = (props: IVisibilityProps) => ({\n  visibility: props.visibility,\n});\n\n/**\n * WHITESPACE\n */\n\nexport interface IWhiteSpaceProps {\n  whiteSpace?: WhiteSpaceProperty;\n}\n\nexport const whiteSpace = (props: IWhiteSpaceProps) => ({\n  whiteSpace: props.whiteSpace,\n});\n\n/**\n * SPACE\n * we overwrite styled-system space function to have better space prop priority p > px > pr\n * NEED TO PASS THEME FOR THIS RULE TO USE OUR PREDEFINED VALUES\n */\n\n// @ts-ignore missing type\nexport const space = ss.mapProps((props: ss.SpaceProps) => ({\n  ...props,\n  mt: !isNil(props.mt) ? props.mt : props.my,\n  mb: !isNil(props.mb) ? props.mb : props.my,\n  ml: !isNil(props.ml) ? props.ml : props.mx,\n  mr: !isNil(props.mr) ? props.mr : props.mx,\n  pt: !isNil(props.pt) ? props.pt : props.py,\n  pb: !isNil(props.pb) ? props.pb : props.py,\n  pl: !isNil(props.pl) ? props.pl : props.px,\n  pr: !isNil(props.pr) ? props.pr : props.px,\n}))(\n  ss.compose(\n    // @ts-ignore missing type\n    ss.margin,\n    // @ts-ignore missing type\n    ss.marginTop,\n    // @ts-ignore missing type\n    ss.marginBottom,\n    // @ts-ignore missing type\n    ss.marginLeft,\n    // @ts-ignore missing type\n    ss.marginRight,\n    // @ts-ignore missing type\n    ss.padding,\n    // @ts-ignore missing type\n    ss.paddingTop,\n    // @ts-ignore missing type\n    ss.paddingBottom,\n    // @ts-ignore missing type\n    ss.paddingLeft,\n    // @ts-ignore missing type\n    ss.paddingRight\n  )\n);\n","// styled-system overrides, these can be overwritten by user themese but this is not advised\nconst space = {\n  0: '0px',\n  // increase by 2*0 = 1\n  1: '1px',\n  2: '2px',\n  3: '3px',\n  4: '4px',\n  5: '5px',\n\n  // increase by 2*1 = 2\n  6: '6px',\n  7: '8px',\n  8: '10px',\n  9: '12px',\n  10: '14px',\n\n  // increase by 2*2 = 4\n  11: '18px',\n  12: '22px',\n  13: '26px',\n  14: '30px',\n  15: '34px',\n\n  // increase by 2*3 = 6\n  16: '40px',\n  17: '46px',\n  18: '52px',\n  19: '60px',\n  20: '66px',\n\n  // increase by 2*4 = 8\n  21: '78px',\n  22: '86px',\n  23: '94px',\n  24: '102px',\n  25: '110px',\n};\n\nexport const configuration = { space };\n","import { ITheme } from './types';\n\n/**\n * CONSTANTS/HELPERS\n */\n\nconst opacityBorder = 'rgba(16,22,26,.15)';\n\nconst inputTheme: ITheme['input'] = {\n  fg: '#f5f8fa',\n  bg: 'rgb(65, 65, 65)',\n  border: opacityBorder,\n  invalidFg: 'red',\n  invalidBg: 'rgb(45, 18, 17)',\n  invalidBorder: 'darkred',\n  warningFg: 'yellow',\n  warningBg: 'rgb(45, 41, 17)',\n  warningBorder: '#9c9c00',\n};\n\nconst buttonTheme: ITheme['button'] = {\n  fg: 'white',\n  bg: 'rgb(65, 65, 65)',\n  border: opacityBorder,\n  hoverBg: 'rgb(89, 89, 89)',\n};\n\nconst checkboxTheme: ITheme['checkbox'] = {\n  ...buttonTheme,\n  fg: 'rgb(65, 65, 65)',\n  checked: 'steelblue',\n  invalidFg: 'red',\n  invalidBg: 'rgb(45, 18, 17)',\n  invalidChecked: 'rgb(45, 18, 17)',\n  invalidBorder: 'darkred',\n  warningFg: 'yellow',\n  warningBg: 'rgb(45, 41, 17)',\n  warningChecked: 'rgb(45, 41, 17)',\n  warningBorder: '#9c9c00',\n};\n\nconst menuTheme: ITheme['menu'] = {\n  fg: 'white',\n  bg: '#222',\n  border: opacityBorder,\n  hoverBg: 'rgba(167,182,194,.3)',\n};\n\n/**\n * THEME\n */\nexport const darkTheme: ITheme = {\n  base: 'dark',\n\n  badge: {\n    default: {\n      fg: '#fff',\n      bg: '#6c757e',\n    },\n    warning: {\n      fg: '#21252a',\n      bg: '#ffc108',\n    },\n    error: {\n      fg: '#fff',\n      bg: '#dc3546',\n    },\n  },\n\n  button: buttonTheme,\n\n  blockQuote: {\n    bg: '#093e6f',\n    border: '#247aca',\n    shadow: '0 0 1px rgba(72, 164, 249, 0.15)',\n  },\n\n  checkbox: checkboxTheme,\n\n  code: {\n    bg: '#28303a',\n    border: 'rgb(83, 89, 97)',\n\n    inlineFg: 'inherit',\n    inlineBg: 'rgb(77, 77, 77)',\n\n    syntax: {\n      primary: '#e91e63',\n      secondary: '#4caf50',\n      comment: '#c2cbd0',\n      punctuation: '#c3c9cc',\n      keyword: '#FFFFC7',\n      function: '#f44336',\n      variable: '#FFFFC7',\n      operator: '#795548',\n      regex: '#ff9800',\n    },\n  },\n\n  contextMenu: menuTheme,\n\n  dialog: {\n    bg: '#222',\n    fg: '#fff',\n  },\n\n  input: inputTheme,\n\n  link: {\n    fg: '#3498db',\n    hoverFg: '#c6f6ff',\n  },\n\n  menu: menuTheme,\n\n  overlay: {\n    bg: 'rgba(255, 255, 255, 0.4)',\n  },\n\n  scrollbar: {\n    bg: 'rgba(255, 255, 255, 0.7)',\n  },\n\n  select: {\n    ...inputTheme,\n\n    menu: {\n      ...menuTheme,\n      selectedBg: '#193d6b',\n    },\n\n    chip: {\n      fg: '#BFCCD6',\n      bg: buttonTheme.bg,\n      border: opacityBorder,\n    },\n  },\n\n  table: {\n    fg: 'inherit',\n    border: 'rgb(77, 77, 77)',\n    shadow: '0 0 10px 1px rgba(255,255,255,0.6) inset',\n    evenBg: 'rgb(29, 29, 29)',\n  },\n\n  textarea: inputTheme,\n\n  tabs: {\n    bg: '#28303a',\n    fg: 'rgb(168, 172, 175)',\n    border: 'rgb(65, 65, 65)',\n    selectedFg: '#fff',\n    selectedBg: '#1b2129',\n  },\n\n  toggle: {\n    ...checkboxTheme,\n    bg: 'gainsboro',\n  },\n\n  tooltip: inputTheme,\n\n  toast: {\n    toastFg: '#f0f0f0',\n    toastBg: '#222',\n\n    actionFg: '#f0f0f0',\n    actionBg: 'rgba(138,155,168,0.25)',\n\n    progressBg: '#fff',\n\n    info: 'blue',\n    success: 'green',\n    warning: 'orange',\n    error: 'red',\n  },\n};\n","import { Dictionary, Omit } from '@stoplight/types';\nimport merge = require('lodash/merge');\nimport * as React from 'react';\n\nimport { configuration } from './configuration';\nimport { darkTheme } from './dark';\nimport { lightTheme } from './light';\n\nimport { BaseTheme, ICustomTheme, ITheme } from './types';\n\nexport * from './types';\nexport * from './utils';\n\n/**\n * Every app should export the result of this function once, and re-use these values.\n *\n * This enables typings for zones.\n */\nexport function createThemedModule<S extends string, T extends ICustomTheme>() {\n  return {\n    ThemeProvider: ThemeProvider as React.FunctionComponent<IThemeProvider<S, T>>,\n    ThemeZone: ThemeZone as IThemeZone<S>,\n    useTheme: useTheme as () => T,\n    useThemeZones: useThemeZones as () => ThemeZones<S, T>,\n  };\n}\n\n/** Our base themes. These are not exported - the end user should just set the 'base' property on their ICustomTheme */\nconst baseThemes: Dictionary<ITheme, BaseTheme> = {\n  dark: darkTheme,\n  light: lightTheme,\n};\n\nconst defaultTheme = baseThemes.light;\n\n/**\n * ThemeProvider\n */\n\nconst Theme = React.createContext(defaultTheme);\nexport const useTheme = () => React.useContext<ITheme>(Theme);\n\nexport interface IThemeProvider<S extends string, T extends ICustomTheme> {\n  theme?: T;\n  zones?: ThemeZones<S, T>;\n}\n\n/** The primary theme provider. Every app should render this once, towards the top of the react component tree. */\nexport const ThemeProvider: React.FunctionComponent<IThemeProvider<any, any>> = ({ children, theme, zones = {} }) => {\n  const targetTheme = theme || defaultTheme;\n\n  return (\n    <Theme.Provider value={merge({}, configuration, baseThemes[targetTheme.base], targetTheme)}>\n      <ThemeZones.Provider value={zones}>{children}</ThemeZones.Provider>\n    </Theme.Provider>\n  );\n};\n\n/**\n * ThemeZone\n */\n\nconst ThemeZones = React.createContext<ThemeZones<any, any>>({});\nexport const useThemeZones = () => React.useContext(ThemeZones);\n\nexport type ThemeZoneObj = Omit<ICustomTheme, 'base'>;\nexport type ThemeZone<T extends ThemeZoneObj> =\n  | T\n  | ThemeZoneObj\n  | ((parentTheme: ITheme) => ThemeZoneObj)\n  | ((parentTheme: ITheme) => T);\nexport type ThemeZones<S extends string, T extends ThemeZoneObj> = Dictionary<ThemeZone<T>, S>;\n\nexport interface IThemeZone<S extends string>\n  extends React.FunctionComponent<{\n    name: S;\n  }> {}\n\nexport const ThemeZone: IThemeZone<any> = ({ children, name }) => {\n  const parentTheme = useTheme();\n  const zones = useThemeZones();\n  const zoneTheme = zones[name] || {};\n\n  return (\n    <Theme.Provider\n      value={merge({}, parentTheme, typeof zoneTheme === 'function' ? zoneTheme(parentTheme) : zoneTheme)}\n    >\n      {children}\n    </Theme.Provider>\n  );\n};\n","import { ITheme } from './types';\n\n/**\n * CONSTANTS/HELPERS\n */\n\nconst opacityBorder = 'rgba(16,22,26,.15)';\n\nconst inputTheme: ITheme['input'] = {\n  fg: '#222',\n  bg: '#fff',\n  border: opacityBorder,\n  invalidFg: 'red',\n  invalidBg: 'rgb(248, 222, 220)',\n  invalidBorder: 'red',\n  warningFg: '#6b6b00',\n  warningBg: '#fffbe8',\n  warningBorder: '#c3c300',\n};\n\nconst buttonTheme: ITheme['button'] = {\n  fg: 'black',\n  bg: 'white',\n  border: opacityBorder,\n  hoverBg: '#ebf1f5',\n};\n\nconst checkboxTheme: ITheme['checkbox'] = {\n  ...buttonTheme,\n  fg: 'white',\n  checked: 'steelblue',\n  invalidFg: 'red',\n  invalidBg: 'rgb(248, 222, 220)',\n  invalidChecked: 'rgb(248, 222, 220)',\n  invalidBorder: 'red',\n  warningFg: '#6b6b00',\n  warningBg: '#fffbe8',\n  warningChecked: '#fffbe8',\n  warningBorder: '#c3c300',\n};\n\nconst menuTheme: ITheme['menu'] = {\n  fg: '#111',\n  bg: '#fff',\n  border: opacityBorder,\n  hoverBg: 'rgba(167,182,194,.3)',\n};\n\n/**\n * THEME\n */\nexport const lightTheme: ITheme = {\n  base: 'light',\n\n  badge: {\n    default: {\n      fg: '#fff',\n      bg: '#6c757e',\n    },\n    warning: {\n      fg: '#21252a',\n      bg: '#ffc108',\n    },\n    error: {\n      fg: '#fff',\n      bg: '#dc3546',\n    },\n  },\n\n  button: buttonTheme,\n\n  blockQuote: {\n    bg: '#f4faff',\n    border: '#48a4f9',\n    shadow: '0 0 1px rgba(72, 164, 249, 0.15)',\n  },\n\n  checkbox: checkboxTheme,\n\n  code: {\n    bg: '#F5F7F9',\n    border: '#E6ECF1',\n    inlineFg: '#1a1a1a',\n    inlineBg: 'rgb(255, 247, 211)',\n\n    syntax: {\n      primary: '#e91e63',\n      secondary: '#4caf50',\n      comment: '#90a4ae',\n      punctuation: '#9e9e9e',\n      keyword: '#3f51b5',\n      function: '#f44336',\n      variable: '#ff9800',\n      operator: '#795548',\n      regex: '#ff9800',\n    },\n  },\n\n  contextMenu: menuTheme,\n\n  dialog: {\n    bg: '#fff',\n    fg: '#111',\n  },\n\n  input: inputTheme,\n\n  link: {\n    fg: '#72bcd4',\n  },\n\n  menu: menuTheme,\n\n  overlay: {\n    bg: 'rgba(0, 0, 0, 0.4)',\n  },\n\n  scrollbar: {\n    bg: 'hsla(0, 0%, 27%, 0.84)',\n  },\n\n  select: {\n    ...inputTheme,\n\n    menu: {\n      ...menuTheme,\n      selectedBg: 'rgba(79, 99, 114, 0.47)',\n    },\n\n    chip: {\n      fg: 'white',\n      bg: 'rgb(118, 130, 143)',\n      border: 'transparent',\n    },\n  },\n\n  table: {\n    fg: '#111',\n    border: '#E6ECF1',\n    shadow: '0 0 8px 1px rgba(0, 0, 0, 0.6) inset',\n    evenBg: '#F5F7F9',\n  },\n\n  textarea: inputTheme,\n\n  tabs: {\n    fg: '#9DAAB6',\n    bg: '#F5F7F9',\n    border: '#E6ECF1',\n\n    selectedFg: '#32373D',\n    selectedBg: '#fff',\n  },\n\n  toggle: {\n    ...checkboxTheme,\n    bg: 'gainsboro',\n  },\n\n  tooltip: inputTheme,\n\n  toast: {\n    toastFg: 'rgb(245, 248, 250)',\n    toastBg: 'rgb(24, 26, 27)',\n\n    actionFg: 'rgb(245, 248, 250)',\n    actionBg: 'rgba(138,155,168,0.25)',\n\n    progressBg: 'rgb(245, 248, 250)',\n\n    info: '#137cbd',\n    success: '#0f9960',\n    warning: '#d9822b',\n    error: '#db3737',\n  },\n};\n","import { useTheme } from './';\n\nexport const colorMixin = (state: string, componentName: string) => {\n  const theme = useTheme()[componentName];\n\n  if (typeof theme !== 'object') {\n    return null;\n  }\n\n  const backgroundColor = theme[state === '' ? 'bg' : `${state}Bg`];\n  const color = theme[state === '' ? 'fg' : `${state}Fg`];\n  const borderColor = theme[state === '' ? 'border' : `${state}Border`];\n\n  const values = {\n    ...(backgroundColor ? { backgroundColor } : null),\n    ...(color ? { color } : null),\n    ...(borderColor ? { borderColor } : null),\n  };\n\n  return state === '' ? values : { [`:${state}`]: values };\n};\n","export enum Variant {\n  Default = '',\n  Invalid = 'invalid',\n  Warning = 'warning',\n}\n","import { ITheme } from '../theme';\nimport { Variant } from '../types';\n\nexport const getVariant = (\n  baseTheme: ITheme['checkbox'] | ITheme['textarea'] | ITheme['input'] | ITheme['select'] | ITheme['tooltip'],\n  variant: Variant = Variant.Default\n) => {\n  switch (variant) {\n    case Variant.Invalid:\n      return {\n        fg: baseTheme.invalidFg,\n        bg: baseTheme.invalidBg,\n        border: baseTheme.invalidBorder,\n        ...('invalidChecked' in baseTheme && { checked: baseTheme.invalidChecked }),\n      };\n    case Variant.Warning:\n      return {\n        fg: baseTheme.warningFg,\n        bg: baseTheme.warningBg,\n        border: baseTheme.warningBorder,\n        ...('warningChecked' in baseTheme && { checked: baseTheme.warningChecked }),\n      };\n    default:\n      return null;\n  }\n};\n","import replace = require('lodash/replace');\nimport { CSSProperties } from 'react';\n\nexport const getScrollTransform = (\n  client: number = 0,\n  scroll: number = 0,\n  currentLocation: number = 0,\n  thumb: number = 0\n) => {\n  const trackSize = client - 28;\n  return (currentLocation / (scroll - client)) * (trackSize - thumb);\n};\n\nexport const getThumbDimension = ({ scroll = 0, client = 0 }: { scroll?: number; client?: number }) => {\n  if (scroll < client) return 0;\n\n  const track = client - 28;\n  const height = Math.ceil((client / scroll) * track);\n  return Math.max(height, 30);\n};\n\nexport const horizontalTrackStyle = (style?: object): CSSProperties => ({\n  background: 'transparent',\n  position: 'absolute',\n  cursor: 'pointer',\n  right: 10,\n  bottom: 2,\n  left: 2,\n  ...style,\n});\n\nexport const verticalTrackStyle = (style?: object): CSSProperties => ({\n  background: 'transparent',\n  position: 'absolute',\n  cursor: 'pointer',\n  top: 2,\n  right: 2,\n  bottom: 10,\n  ...style,\n});\n\nexport const scrollToHash = (hash?: string) => {\n  const element = document.getElementById(replace(hash || window.location.hash, '#', ''));\n  if (element) {\n    element.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });\n  }\n};\n","import isPropValid from '@emotion/is-prop-valid';\nimport { ValueKeyIteratee } from 'lodash';\n\nexport const validPropsPicker: ValueKeyIteratee<any> = (value, prop) => {\n  const includeProp = isPropValid(prop);\n\n  if (!includeProp && process.env.NODE_ENV !== 'production') {\n    console.error(`Invalid prop ${prop} given.`);\n  }\n\n  return includeProp;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;ACCA;AACA;AACA;AAMA;AACA;AACA;AAEA;AAKA;AAEA;;;;;;;;;;;;;;;;ACpBA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AAEA;AAKA;AAsCA;AApCA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AACA;AAgBA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAmEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AAAA;AAEA;AASA;AAuDA;AApDA;;;;;;;;;;;;;;;;ACtJA;AAEA;AAMA;AAIA;AAEA;AACA;AAaA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AC1BA;AAGA;AACA;AAQA;AAIA;AAEA;AAEA;AAYA;AAuCA;AArCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpEA;AACA;AAEA;AAEA;AAQA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAQA;AACA;AAOA;AAGA;AADA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAEA;AAEA;AAUA;AAiBA;AAfA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AAAA;AAQA;AACA;AAEA;AACA;AAKA;AAEA;AAEA;AAKA;;;;;;;;;;;;;;;AC7CA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;AAaA;;;;;;;;;AASA;;;;;;AAMA;;;;;;AAMA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;;;;;;;;;;;;;;AClIA;AAIA;AACA;AACA;AASA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAxEA;;;;;;;;;;;;;;;AC7CA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAXA;;;;;;;;;;;;;;;;AC9BA;AACA;AAiDA;AAzCA;AA0BA;AACA;AAEA;AAEA;AAEA;AAGA;AAGA;AA0OA;AAtNA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAaA;AASA;AACA;AAIA;AA6JA;AA3JA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AACA;AAYA;AAEA;AAEA;AAYA;AACA;AACA;AAKA;AAOA;AAMA;AACA;AAKA;AAMA;AACA;AAGA;AAGA;AAEA;AACA;AAmCA;AAjCA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxRA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AAgBA;AAdA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1DA;AACA;AACA;AAEA;AACA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAJA;AAEA;;;;;;;;;;;;;;;;ACjCA;AAEA;AAMA;AAIA;AAEA;AACA;AAMA;AAJA;AAEA;;;;;;;;;;;;;;;;ACpBA;AAEA;AASA;AACA;AAIA;AAiBA;AACA;AACA;AACA;AAMA;AAJA;AAEA;;;;;;;;;;;;;;;;ACxCA;AAEA;AAOA;AACA;AAEA;AACA;AAmBA;AAjBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;AC9BA;AAGA;AACA;AAEA;AACA;AAEA;AAWA;AACA;AAAA;AAGA;AAGA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AAIA;AAgBA;AA6BA;AA3BA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAwCA;AAtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AClDA;AAEA;AACA;AAMA;AAIA;AAEA;AACA;AAQA;AANA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AAEA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AAEA;AACA;AAKA;AAeA;AACA;AAaA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AA+FA;AA7FA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AAKA;AAmBA;AAjBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3KA;AACA;AACA;AAIA;AAIA;AAEA;AACA;AAgBA;AAdA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3BA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AAMA;AACA;AACA;AACA;AAEA;AAiBA;AAWA;AATA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1IA;AAEA;AAGA;AAIA;AAEA;AAEA;AAEA;AAKA;AAGA;AADA;;;;;;;;;;;;;;;;ACtBA;;;;;;;;;;;;;;;ACGA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AAAA;AAEA;AAGA;AAGA;AAIA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACvJA;AAEA;AAOA;AAIA;AACA;AAHA;AA0BA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA7BA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AA7CA;;;;;;;;;;;;;;;;ACTA;AACA;AA2HA;AAzHA;AACA;AACA;AACA;AAUA;AAEA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AASA;AAwBA;AAIA;AAFA;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAWA;AAIA;AACA;AAEA;AAaA;AAiDA;AA/CA;AAEA;AAIA;AACA;AAEA;AAaA;AAyBA;AAvBA;AAEA;AACA;AACA;;;;;;;;AAQA;;;;AAIA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5FA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AAoDA;AACA;AA4BA;AAEA;AAuBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AA2ZA;AAnZA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AAIA;AAoBA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AAMA;AAQA;AAKA;AAMA;AAaA;AAaA;AAMA;AASA;AACA;AACA;AAEA;AAMA;AAIA;AAcA;AACA;AAGA;AACA;AAEA;AACA;AAMA;AAMA;AAIA;AACA;;;;;;;;;;;;;;;;AC1TA;AAEA;AACA;AAUA;AACA;AAEA;AAEA;AAEA;AAGA;AAoGA;AAlGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAIA;AACA;AACA;AAkEA;AAhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AAiCA;AA9BA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxHA;AAGA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAcA;AAmDA;AAjDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/EA;AAGA;AAGA;AACA;AAEA;AAKA;AAUA;AARA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAaA;AAeA;AAbA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACtCA;AAMA;AAJA;AAIA;AAHA;AAGA;AAFA;AAEA;;;;;;;;;;;;;;;;ACNA;AAEA;AAQA;AACA;AAEA;AAYA;AAQA;AANA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AC/BA;AAGA;AACA;AAEA;AACA;AAEA;AAOA;AAIA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AAmCA;AAjCA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5EA;AAEA;AAEA;AACA;AAGA;AACA;AASA;AACA;AACA;AAEA;AAkBA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7DA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAyBA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAaA;AACA;AAMA;AAEA;AAQA;AAWA;AACA;AAEA;AACA;AAMA;AAMA;AASA;AAuBA;AArBA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChIA;AACA;AACA;AACA;AASA;AAEA;AASA;AACA;AAuBA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAjDA;AAuDA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;;;;;;;;;;;;;;;;ACzFA;AAEA;AAOA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAQA;AAGA;AA0DA;AAxDA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/FA;AAEA;AAEA;AACA;AACA;AAEA;AAQA;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AAIA;AA8KA;AA5KA;AAGA;AACA;AACA;AACA;AAsKA;AApKA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAUA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5MA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;;;;ACxBA;AACA;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxBA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;AAEA;AAIA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAKA;AAKA;;;;;;;;;;;;;;;;ACpDA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;;;;;ACvCA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;ACtDA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AAEA;AAIA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AASA;AAEA;AAKA;AACA;AAIA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;AC3HA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;AC9DA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACxEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACfA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AAIA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvKA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvGA;AACA;;;;;;;;;;;;;;;ACDA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;;;;;;;;;;;;;;;;AC9BA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3BA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AAKA;AAOA;AAIA;;AAEA;AAGA;AAIA;AAQA;AAEA;AASA;AAOA;AAOA;AAWA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACnHA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAWA;AAWA;AAYA;AAWA;AAWA;AAYA;AAWA;AAWA;;;;;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACLA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AASA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;ACpBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;ACvDA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;;;;;;;;;;;;;;;;;;AAqBA;AAMA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AAIA;AAEA;AAAA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAIA;;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;AChJA;AACA;AACA;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AASA;;;;;;;;;;;;;;;;;ACjEA;AAEA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAMA;AAEA;AAeA;AAAA;AACA;AAEA;AAOA;AACA;AAGA;;;;;;;;;;;;;;;;AClFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;;;;;;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACTA;AAEA;AACA;AAEA;AAYA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACjCA;AAGA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrDA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;ACdA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAlBA;;;;;;;;;;;;;;;;ACEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;ACjCA;AAsBA;AAUA;AACA;AACA;AAWA;AACA;AACA;AACA;AAUA;AACA;AACA;AAUA;AACA;AACA;AAWA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAMA;AACA;AACA;AAcA;AACA;AACA;AAUA;AACA;AACA;AAUA;AACA;AACA;AAUA;AACA;AACA;AASA;;;;;;;;;;;;;;;ACxLA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;ACjCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/KA;AACA;AAEA;AACA;AACA;AAKA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAQA;AACA;AAEA;AAEA;AAGA;AAMA;AACA;AAeA;AACA;AACA;AACA;AAEA;AAOA;;;;;;;;;;;;;;;ACpFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/KA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;;;;;;;;;;;;;;;ACpBA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACHA;AAEA;AAIA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzBA;AAGA;AAMA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AAUA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9CA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}