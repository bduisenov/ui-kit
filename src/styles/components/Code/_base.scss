/*
 * TODO add dark scss (should use shades of the variable colors, not separate ones)
*/

$comment: get-theme(code-editor, comment);
$primary: get-theme(code-editor, primary);
$secondary: get-theme(code-editor, secondary);
$operator: get-theme(code-editor, operator);
$keyword: get-theme(code-editor, keyword);
$function: get-theme(code-editor, function);
$variable: get-theme(code-editor, variable);
$regex: get-theme(code-editor, regex);
$punctuation: get-theme(code-editor, punc);

.#{$ns}-code-editor {
  counter-reset: line;

  &.isInline {
    margin: 0 2px;
    border-radius: 2px;
  }

  .namespace {
    opacity: 0.7;
  }

  .line-number {
    padding-left: 40px;
    position: relative;
    width: calc(100% - 40px);
    display: block;

    &::before {
      content: '';
      display: inline-block;
      user-select: none;
      opacity: 0.3;
      text-align: right;
      min-width: 25px;
      position: absolute;
      left: 0;
      counter-increment: line;
      content: counter(line);
    }
  }

  .token {
    &.comment,
    &.prolog,
    &.doctype,
    &.cdata {
      color: $comment;
    }

    &.punctuation {
      color: $punctuation;
    }

    &.property,
    &.tag,
    &.boolean,
    &.number,
    &.symbol,
    &.deleted {
      color: $primary;
    }

    &.selector,
    &.attr-name,
    &.string,
    &.char,
    &.builtin,
    &.inserted {
      color: $secondary;
    }

    &.operator,
    &.entity,
    &.url {
      color: $operator;
    }

    &.atrule,
    &.attr-value,
    &.keyword {
      color: $keyword;
    }

    &.function {
      color: $function;
    }

    &.variable {
      color: $variable;
    }

    &.regex,
    &.important {
      color: $regex;
    }

    &.important,
    &.bold {
      font-weight: bold;
    }

    &.italic {
      font-style: italic;
    }

    &.entity {
      cursor: help;
    }
  }
}
